using System.Linq;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.Contracts;
// Set the name of your grammar here (and at the end of this grammar):
COMPILER LobLang

// Add auxiliary methods and declaration herec.
        public StackMachine Machine { get; set; }

// If you want your generated compiler case insensitive add the
// keyword IGNORECASE here.


CHARACTERS
// Add character set declarations here.
// Examples:
letter = 'A'..'Z' + 'a'..'z'.
digit = "0123456789".
cr = '\r'.
lf = '\n'.
anyButQuote = ANY -'"'.

TOKENS
// Add token declarations here.
// Example:
ident = (letter|'_') {'_' | letter | digit}.
number = digit {digit}.
string = '"' {anyButQuote} '"'.

PRAGMAS
// Add pragma declarations here.
// Example:
//   switch = '$' { digit | letter }. (. Optional semantic action .)


// Add comments here.
// Example for a multi-line block comment:
COMMENTS FROM "/*" TO "*/" NESTED
// Example for a single line comment:
COMMENTS FROM "//" TO lf


// Set the ignored characters (whitespaces) here, the blank character is
// ignored by default.
// Example, add line breaks to the ignore set.
IGNORE cr + lf


PRODUCTIONS

// Add your productions here, one must have the same name as the grammar,
// it will be the start symbol (entry point of your compiler).
// Example:
//   Empty = "BEGIN" { Statement } "END".
//   Statement = ident "=" number { "+" number } .

LobLang=                                                        (.
                                                                 Machine = new StackMachine();
                                                                 SymTabFunction func;
                                                                 .)
    ModuleHeader
    {Import}
    FunctionDeclaration<.out func.>                               (.Machine.DefineNewFunction(func);.)
     {
     FunctionDeclaration<out func>
     }
    .

ModuleHeader= 
    "module" 
    ident                                                       (.Machine.SetModuleName(t.val);.)
    "."
    .

Import=
    "import" ident "."
    .

FunctionDeclaration<.out SymTabFunction func.> 
                                (.
                                SymTabFunction tmp = new SymTabFunction();
                                .)
    =
    "function" ident                       (.tmp.Name = t.val;.)                       
    "(" 
    ArgList 
    ")" 
    "{" 
    (
        Statement 
        {
        Statement
        }
    ) 
    "}"                         (.func = tmp;.)
    .

FunctionInvocation =
    ident "(" ArgList ")"
    .

ArgList=
    Expression {"," Expression} .

//Arg = 
    //Expression
    //| Binding
    //.
Statement =
    //Binding
    Expression
    ";"
    .

//VariableReference=
    //ident
    //.

ReferenceOrBinding = 
    ident {"=" Expression}
    .
           
Expression  = XmlModifyingExpression
    |  XmlPattern                            //(only makes sense in a binding with a bound var)
    |  XmlFragment
    |  FunctionInvocation
    |  XmlDocument
    | ReferenceOrBinding
    .

XmlModifyingExpression =
    PathExpression 
        (
        "=="  Value                 //replace
        |  "=>"  Value              //append
        |  "=<" Value               //prepend
        |  "=?" XmlFragment         //match
        |  "->" PathExpression      //move
        |  "-><" PathExpression     //move to front
        |  "->>" PathExpression     //move to end
        |  "!=" ident               // delete
        )
.


Value= ident
   |  "(" Expression ")"
   | PathExpression
   | XmlFragment
    .

PathExpression = "$" Path               
    .

Path = ident {"/" ident} 
    .

Pattern = "?" ident
    .

ValueOf = "{" ident "}"
    .
                       
XmlDocument = "<?" ident {XmlAttribute} "?>" XmlObject 
    .

XmlPattern = "?" XmlFragment
    .

XmlFragment =  XmlObject
    .


XmlObject    = XmlStartTag {XmlContent} XmlEndTag
              | XmlUnaryTag
    .

XmlStartTag = 
    "<"                                                     (.Machine.EnqueueBuiltinFunction("XmlStartElement");.) 
    ident                                                   (.Machine.CreatePusherFunction(t.val);Machine.EnqueueBuiltinFunction("XmlIdent");.)
    [XmlAttributesOrPattern] 
    ">"                                                     (.Machine.EnqueueBuiltinFunction("XmlEndBrace");.)
    .

XmlEndTag   = "</" ident ">" 
    .

XmlUnaryTag = "<" ident [XmlAttributesOrPattern] "/>"
    .

XmlContent   = XmlObject {XmlObject}
              | XmlText
    .

XmlAttributesOrPattern =  Pattern
               | ValueOf
               | XmlAttribute {XmlAttribute}
    .
               

XmlAttribute = 
    ident                                                   (.Machine.CreatePusherFunction(t.val); Machine.EnqueueBuiltinFunction("XmlAttrName"); .)
        "=" 
    XmlAttributeValue                                       
    .

XmlAttributeValue=
    string                                                  (.Machine.CreatePusherFunction(t.val); Machine.EnqueueBuiltinFunction("XmlAttrVal");  .)
    .

XmlText = XmlText XmlWord 
         | XmlWord 
    .

XmlWord = ident                                             (.Machine.CreatePusherFunction(t.val); Machine.EnqueueBuiltinFunction("XmlAttrVal");  .)
         | "="
         | XmlCharName
         | XmlCharNumber               
    .

XmlCharName=
    "&" ident ";"
    .

XmlCharNumber=
    "&#" number ";"
    .

// End of your compiler specification, make sure the name here matches
// the grammar name at the start of this grammar.
END LobLang.