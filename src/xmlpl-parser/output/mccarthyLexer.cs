//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3 2012-03-12 10:22:02

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

namespace xmlpl_parser
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class mccarthyLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int T__16=16;
	public const int T__17=17;
	public const int CHAR=4;
	public const int COMMENT=5;
	public const int ESC_SEQ=6;
	public const int EXPONENT=7;
	public const int FLOAT=8;
	public const int HEX_DIGIT=9;
	public const int ID=10;
	public const int INT=11;
	public const int OCTAL_ESC=12;
	public const int STRING=13;
	public const int UNICODE_ESC=14;
	public const int WS=15;

    // delegates
    // delegators

	public mccarthyLexer()
	{
		OnCreated();
	}

	public mccarthyLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public mccarthyLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_T__16();
	partial void LeaveRule_T__16();

	// $ANTLR start "T__16"
	[GrammarRule("T__16")]
	private void mT__16()
	{
		EnterRule_T__16();
		EnterRule("T__16", 1);
		TraceIn("T__16", 1);
		try
		{
			int _type = T__16;
			int _channel = DefaultTokenChannel;
			// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:10:7: ( ';' )
			DebugEnterAlt(1);
			// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:10:9: ';'
			{
			DebugLocation(10, 9);
			Match(';'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__16", 1);
			LeaveRule("T__16", 1);
			LeaveRule_T__16();
		}
	}
	// $ANTLR end "T__16"

	partial void EnterRule_T__17();
	partial void LeaveRule_T__17();

	// $ANTLR start "T__17"
	[GrammarRule("T__17")]
	private void mT__17()
	{
		EnterRule_T__17();
		EnterRule("T__17", 2);
		TraceIn("T__17", 2);
		try
		{
			int _type = T__17;
			int _channel = DefaultTokenChannel;
			// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:11:7: ( 'module' )
			DebugEnterAlt(1);
			// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:11:9: 'module'
			{
			DebugLocation(11, 9);
			Match("module"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__17", 2);
			LeaveRule("T__17", 2);
			LeaveRule_T__17();
		}
	}
	// $ANTLR end "T__17"

	partial void EnterRule_ID();
	partial void LeaveRule_ID();

	// $ANTLR start "ID"
	[GrammarRule("ID")]
	private void mID()
	{
		EnterRule_ID();
		EnterRule("ID", 3);
		TraceIn("ID", 3);
		try
		{
			int _type = ID;
			int _channel = DefaultTokenChannel;
			// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:17:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )
			DebugEnterAlt(1);
			// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:17:7: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
			{
			DebugLocation(17, 7);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(17, 31);
			// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:17:31: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if (((LA1_0>='0' && LA1_0<='9')||(LA1_0>='A' && LA1_0<='Z')||LA1_0=='_'||(LA1_0>='a' && LA1_0<='z')))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:
					{
					DebugLocation(17, 31);
					input.Consume();


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ID", 3);
			LeaveRule("ID", 3);
			LeaveRule_ID();
		}
	}
	// $ANTLR end "ID"

	partial void EnterRule_INT();
	partial void LeaveRule_INT();

	// $ANTLR start "INT"
	[GrammarRule("INT")]
	private void mINT()
	{
		EnterRule_INT();
		EnterRule("INT", 4);
		TraceIn("INT", 4);
		try
		{
			int _type = INT;
			int _channel = DefaultTokenChannel;
			// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:20:5: ( ( '0' .. '9' )+ )
			DebugEnterAlt(1);
			// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:20:7: ( '0' .. '9' )+
			{
			DebugLocation(20, 7);
			// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:20:7: ( '0' .. '9' )+
			int cnt2=0;
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_0 = input.LA(1);

				if (((LA2_0>='0' && LA2_0<='9')))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:
					{
					DebugLocation(20, 7);
					input.Consume();


					}
					break;

				default:
					if (cnt2 >= 1)
						goto loop2;

					EarlyExitException eee2 = new EarlyExitException( 2, input );
					DebugRecognitionException(eee2);
					throw eee2;
				}
				cnt2++;
			}
			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INT", 4);
			LeaveRule("INT", 4);
			LeaveRule_INT();
		}
	}
	// $ANTLR end "INT"

	partial void EnterRule_FLOAT();
	partial void LeaveRule_FLOAT();

	// $ANTLR start "FLOAT"
	[GrammarRule("FLOAT")]
	private void mFLOAT()
	{
		EnterRule_FLOAT();
		EnterRule("FLOAT", 5);
		TraceIn("FLOAT", 5);
		try
		{
			int _type = FLOAT;
			int _channel = DefaultTokenChannel;
			// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:24:5: ( ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )? | '.' ( '0' .. '9' )+ ( EXPONENT )? | ( '0' .. '9' )+ EXPONENT )
			int alt9=3;
			try { DebugEnterDecision(9, false);
			try
			{
				alt9 = dfa9.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:24:9: ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )?
				{
				DebugLocation(24, 9);
				// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:24:9: ( '0' .. '9' )+
				int cnt3=0;
				try { DebugEnterSubRule(3);
				while (true)
				{
					int alt3=2;
					try { DebugEnterDecision(3, false);
					int LA3_0 = input.LA(1);

					if (((LA3_0>='0' && LA3_0<='9')))
					{
						alt3 = 1;
					}


					} finally { DebugExitDecision(3); }
					switch (alt3)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:
						{
						DebugLocation(24, 9);
						input.Consume();


						}
						break;

					default:
						if (cnt3 >= 1)
							goto loop3;

						EarlyExitException eee3 = new EarlyExitException( 3, input );
						DebugRecognitionException(eee3);
						throw eee3;
					}
					cnt3++;
				}
				loop3:
					;

				} finally { DebugExitSubRule(3); }

				DebugLocation(24, 21);
				Match('.'); 
				DebugLocation(24, 25);
				// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:24:25: ( '0' .. '9' )*
				try { DebugEnterSubRule(4);
				while (true)
				{
					int alt4=2;
					try { DebugEnterDecision(4, false);
					int LA4_0 = input.LA(1);

					if (((LA4_0>='0' && LA4_0<='9')))
					{
						alt4 = 1;
					}


					} finally { DebugExitDecision(4); }
					switch ( alt4 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:
						{
						DebugLocation(24, 25);
						input.Consume();


						}
						break;

					default:
						goto loop4;
					}
				}

				loop4:
					;

				} finally { DebugExitSubRule(4); }

				DebugLocation(24, 37);
				// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:24:37: ( EXPONENT )?
				int alt5=2;
				try { DebugEnterSubRule(5);
				try { DebugEnterDecision(5, false);
				int LA5_0 = input.LA(1);

				if ((LA5_0=='E'||LA5_0=='e'))
				{
					alt5 = 1;
				}
				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:24:37: EXPONENT
					{
					DebugLocation(24, 37);
					mEXPONENT(); 

					}
					break;

				}
				} finally { DebugExitSubRule(5); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:25:9: '.' ( '0' .. '9' )+ ( EXPONENT )?
				{
				DebugLocation(25, 9);
				Match('.'); 
				DebugLocation(25, 13);
				// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:25:13: ( '0' .. '9' )+
				int cnt6=0;
				try { DebugEnterSubRule(6);
				while (true)
				{
					int alt6=2;
					try { DebugEnterDecision(6, false);
					int LA6_0 = input.LA(1);

					if (((LA6_0>='0' && LA6_0<='9')))
					{
						alt6 = 1;
					}


					} finally { DebugExitDecision(6); }
					switch (alt6)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:
						{
						DebugLocation(25, 13);
						input.Consume();


						}
						break;

					default:
						if (cnt6 >= 1)
							goto loop6;

						EarlyExitException eee6 = new EarlyExitException( 6, input );
						DebugRecognitionException(eee6);
						throw eee6;
					}
					cnt6++;
				}
				loop6:
					;

				} finally { DebugExitSubRule(6); }

				DebugLocation(25, 25);
				// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:25:25: ( EXPONENT )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0=='E'||LA7_0=='e'))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:25:25: EXPONENT
					{
					DebugLocation(25, 25);
					mEXPONENT(); 

					}
					break;

				}
				} finally { DebugExitSubRule(7); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:26:9: ( '0' .. '9' )+ EXPONENT
				{
				DebugLocation(26, 9);
				// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:26:9: ( '0' .. '9' )+
				int cnt8=0;
				try { DebugEnterSubRule(8);
				while (true)
				{
					int alt8=2;
					try { DebugEnterDecision(8, false);
					int LA8_0 = input.LA(1);

					if (((LA8_0>='0' && LA8_0<='9')))
					{
						alt8 = 1;
					}


					} finally { DebugExitDecision(8); }
					switch (alt8)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:
						{
						DebugLocation(26, 9);
						input.Consume();


						}
						break;

					default:
						if (cnt8 >= 1)
							goto loop8;

						EarlyExitException eee8 = new EarlyExitException( 8, input );
						DebugRecognitionException(eee8);
						throw eee8;
					}
					cnt8++;
				}
				loop8:
					;

				} finally { DebugExitSubRule(8); }

				DebugLocation(26, 21);
				mEXPONENT(); 

				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FLOAT", 5);
			LeaveRule("FLOAT", 5);
			LeaveRule_FLOAT();
		}
	}
	// $ANTLR end "FLOAT"

	partial void EnterRule_COMMENT();
	partial void LeaveRule_COMMENT();

	// $ANTLR start "COMMENT"
	[GrammarRule("COMMENT")]
	private void mCOMMENT()
	{
		EnterRule_COMMENT();
		EnterRule("COMMENT", 6);
		TraceIn("COMMENT", 6);
		try
		{
			int _type = COMMENT;
			int _channel = DefaultTokenChannel;
			// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:30:5: ( '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' | '/*' ( options {greedy=false; } : . )* '*/' )
			int alt13=2;
			try { DebugEnterDecision(13, false);
			int LA13_0 = input.LA(1);

			if ((LA13_0=='/'))
			{
				int LA13_1 = input.LA(2);

				if ((LA13_1=='/'))
				{
					alt13 = 1;
				}
				else if ((LA13_1=='*'))
				{
					alt13 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 13, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 13, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:30:9: '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n'
				{
				DebugLocation(30, 9);
				Match("//"); 

				DebugLocation(30, 14);
				// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:30:14: (~ ( '\\n' | '\\r' ) )*
				try { DebugEnterSubRule(10);
				while (true)
				{
					int alt10=2;
					try { DebugEnterDecision(10, false);
					int LA10_0 = input.LA(1);

					if (((LA10_0>='\u0000' && LA10_0<='\t')||(LA10_0>='\u000B' && LA10_0<='\f')||(LA10_0>='\u000E' && LA10_0<='\uFFFF')))
					{
						alt10 = 1;
					}


					} finally { DebugExitDecision(10); }
					switch ( alt10 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:
						{
						DebugLocation(30, 14);
						input.Consume();


						}
						break;

					default:
						goto loop10;
					}
				}

				loop10:
					;

				} finally { DebugExitSubRule(10); }

				DebugLocation(30, 28);
				// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:30:28: ( '\\r' )?
				int alt11=2;
				try { DebugEnterSubRule(11);
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if ((LA11_0=='\r'))
				{
					alt11 = 1;
				}
				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:30:28: '\\r'
					{
					DebugLocation(30, 28);
					Match('\r'); 

					}
					break;

				}
				} finally { DebugExitSubRule(11); }

				DebugLocation(30, 34);
				Match('\n'); 
				DebugLocation(30, 39);
				_channel=HIDDEN;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:31:9: '/*' ( options {greedy=false; } : . )* '*/'
				{
				DebugLocation(31, 9);
				Match("/*"); 

				DebugLocation(31, 14);
				// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:31:14: ( options {greedy=false; } : . )*
				try { DebugEnterSubRule(12);
				while (true)
				{
					int alt12=2;
					try { DebugEnterDecision(12, false);
					int LA12_0 = input.LA(1);

					if ((LA12_0=='*'))
					{
						int LA12_1 = input.LA(2);

						if ((LA12_1=='/'))
						{
							alt12 = 2;
						}
						else if (((LA12_1>='\u0000' && LA12_1<='.')||(LA12_1>='0' && LA12_1<='\uFFFF')))
						{
							alt12 = 1;
						}


					}
					else if (((LA12_0>='\u0000' && LA12_0<=')')||(LA12_0>='+' && LA12_0<='\uFFFF')))
					{
						alt12 = 1;
					}


					} finally { DebugExitDecision(12); }
					switch ( alt12 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:31:42: .
						{
						DebugLocation(31, 42);
						MatchAny(); 

						}
						break;

					default:
						goto loop12;
					}
				}

				loop12:
					;

				} finally { DebugExitSubRule(12); }

				DebugLocation(31, 47);
				Match("*/"); 

				DebugLocation(31, 52);
				_channel=HIDDEN;

				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMENT", 6);
			LeaveRule("COMMENT", 6);
			LeaveRule_COMMENT();
		}
	}
	// $ANTLR end "COMMENT"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 7);
		TraceIn("WS", 7);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:34:5: ( ( ' ' | '\\t' | '\\r' | '\\n' ) )
			DebugEnterAlt(1);
			// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:34:9: ( ' ' | '\\t' | '\\r' | '\\n' )
			{
			DebugLocation(34, 9);
			if ((input.LA(1)>='\t' && input.LA(1)<='\n')||input.LA(1)=='\r'||input.LA(1)==' ')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(38, 11);
			_channel=HIDDEN;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 7);
			LeaveRule("WS", 7);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	partial void EnterRule_STRING();
	partial void LeaveRule_STRING();

	// $ANTLR start "STRING"
	[GrammarRule("STRING")]
	private void mSTRING()
	{
		EnterRule_STRING();
		EnterRule("STRING", 8);
		TraceIn("STRING", 8);
		try
		{
			int _type = STRING;
			int _channel = DefaultTokenChannel;
			// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:42:5: ( '\"' ( ESC_SEQ |~ ( '\\\\' | '\"' ) )* '\"' )
			DebugEnterAlt(1);
			// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:42:8: '\"' ( ESC_SEQ |~ ( '\\\\' | '\"' ) )* '\"'
			{
			DebugLocation(42, 8);
			Match('\"'); 
			DebugLocation(42, 12);
			// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:42:12: ( ESC_SEQ |~ ( '\\\\' | '\"' ) )*
			try { DebugEnterSubRule(14);
			while (true)
			{
				int alt14=3;
				try { DebugEnterDecision(14, false);
				int LA14_0 = input.LA(1);

				if ((LA14_0=='\\'))
				{
					alt14 = 1;
				}
				else if (((LA14_0>='\u0000' && LA14_0<='!')||(LA14_0>='#' && LA14_0<='[')||(LA14_0>=']' && LA14_0<='\uFFFF')))
				{
					alt14 = 2;
				}


				} finally { DebugExitDecision(14); }
				switch ( alt14 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:42:14: ESC_SEQ
					{
					DebugLocation(42, 14);
					mESC_SEQ(); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:42:24: ~ ( '\\\\' | '\"' )
					{
					DebugLocation(42, 24);
					input.Consume();


					}
					break;

				default:
					goto loop14;
				}
			}

			loop14:
				;

			} finally { DebugExitSubRule(14); }

			DebugLocation(42, 39);
			Match('\"'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRING", 8);
			LeaveRule("STRING", 8);
			LeaveRule_STRING();
		}
	}
	// $ANTLR end "STRING"

	partial void EnterRule_CHAR();
	partial void LeaveRule_CHAR();

	// $ANTLR start "CHAR"
	[GrammarRule("CHAR")]
	private void mCHAR()
	{
		EnterRule_CHAR();
		EnterRule("CHAR", 9);
		TraceIn("CHAR", 9);
		try
		{
			int _type = CHAR;
			int _channel = DefaultTokenChannel;
			// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:45:5: ( '\\'' ( ESC_SEQ |~ ( '\\'' | '\\\\' ) ) '\\'' )
			DebugEnterAlt(1);
			// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:45:8: '\\'' ( ESC_SEQ |~ ( '\\'' | '\\\\' ) ) '\\''
			{
			DebugLocation(45, 8);
			Match('\''); 
			DebugLocation(45, 13);
			// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:45:13: ( ESC_SEQ |~ ( '\\'' | '\\\\' ) )
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, false);
			int LA15_0 = input.LA(1);

			if ((LA15_0=='\\'))
			{
				alt15 = 1;
			}
			else if (((LA15_0>='\u0000' && LA15_0<='&')||(LA15_0>='(' && LA15_0<='[')||(LA15_0>=']' && LA15_0<='\uFFFF')))
			{
				alt15 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 15, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:45:15: ESC_SEQ
				{
				DebugLocation(45, 15);
				mESC_SEQ(); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:45:25: ~ ( '\\'' | '\\\\' )
				{
				DebugLocation(45, 25);
				input.Consume();


				}
				break;

			}
			} finally { DebugExitSubRule(15); }

			DebugLocation(45, 40);
			Match('\''); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CHAR", 9);
			LeaveRule("CHAR", 9);
			LeaveRule_CHAR();
		}
	}
	// $ANTLR end "CHAR"

	partial void EnterRule_EXPONENT();
	partial void LeaveRule_EXPONENT();

	// $ANTLR start "EXPONENT"
	[GrammarRule("EXPONENT")]
	private void mEXPONENT()
	{
		EnterRule_EXPONENT();
		EnterRule("EXPONENT", 10);
		TraceIn("EXPONENT", 10);
		try
		{
			// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:50:10: ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )
			DebugEnterAlt(1);
			// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:50:12: ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+
			{
			DebugLocation(50, 12);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(50, 22);
			// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:50:22: ( '+' | '-' )?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, false);
			int LA16_0 = input.LA(1);

			if ((LA16_0=='+'||LA16_0=='-'))
			{
				alt16 = 1;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:
				{
				DebugLocation(50, 22);
				input.Consume();


				}
				break;

			}
			} finally { DebugExitSubRule(16); }

			DebugLocation(50, 33);
			// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:50:33: ( '0' .. '9' )+
			int cnt17=0;
			try { DebugEnterSubRule(17);
			while (true)
			{
				int alt17=2;
				try { DebugEnterDecision(17, false);
				int LA17_0 = input.LA(1);

				if (((LA17_0>='0' && LA17_0<='9')))
				{
					alt17 = 1;
				}


				} finally { DebugExitDecision(17); }
				switch (alt17)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:
					{
					DebugLocation(50, 33);
					input.Consume();


					}
					break;

				default:
					if (cnt17 >= 1)
						goto loop17;

					EarlyExitException eee17 = new EarlyExitException( 17, input );
					DebugRecognitionException(eee17);
					throw eee17;
				}
				cnt17++;
			}
			loop17:
				;

			} finally { DebugExitSubRule(17); }


			}

		}
		finally
		{
			TraceOut("EXPONENT", 10);
			LeaveRule("EXPONENT", 10);
			LeaveRule_EXPONENT();
		}
	}
	// $ANTLR end "EXPONENT"

	partial void EnterRule_HEX_DIGIT();
	partial void LeaveRule_HEX_DIGIT();

	// $ANTLR start "HEX_DIGIT"
	[GrammarRule("HEX_DIGIT")]
	private void mHEX_DIGIT()
	{
		EnterRule_HEX_DIGIT();
		EnterRule("HEX_DIGIT", 11);
		TraceIn("HEX_DIGIT", 11);
		try
		{
			// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:53:11: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )
			DebugEnterAlt(1);
			// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:
			{
			DebugLocation(53, 11);
			if ((input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='F')||(input.LA(1)>='a' && input.LA(1)<='f'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("HEX_DIGIT", 11);
			LeaveRule("HEX_DIGIT", 11);
			LeaveRule_HEX_DIGIT();
		}
	}
	// $ANTLR end "HEX_DIGIT"

	partial void EnterRule_ESC_SEQ();
	partial void LeaveRule_ESC_SEQ();

	// $ANTLR start "ESC_SEQ"
	[GrammarRule("ESC_SEQ")]
	private void mESC_SEQ()
	{
		EnterRule_ESC_SEQ();
		EnterRule("ESC_SEQ", 12);
		TraceIn("ESC_SEQ", 12);
		try
		{
			// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:57:5: ( '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' ) | UNICODE_ESC | OCTAL_ESC )
			int alt18=3;
			try { DebugEnterDecision(18, false);
			int LA18_0 = input.LA(1);

			if ((LA18_0=='\\'))
			{
				switch (input.LA(2))
				{
				case '\"':
				case '\'':
				case '\\':
				case 'b':
				case 'f':
				case 'n':
				case 'r':
				case 't':
					{
					alt18 = 1;
					}
					break;
				case 'u':
					{
					alt18 = 2;
					}
					break;
				case '0':
				case '1':
				case '2':
				case '3':
				case '4':
				case '5':
				case '6':
				case '7':
					{
					alt18 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 18, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 18, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:57:9: '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' )
				{
				DebugLocation(57, 9);
				Match('\\'); 
				DebugLocation(57, 14);
				input.Consume();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:58:9: UNICODE_ESC
				{
				DebugLocation(58, 9);
				mUNICODE_ESC(); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:59:9: OCTAL_ESC
				{
				DebugLocation(59, 9);
				mOCTAL_ESC(); 

				}
				break;

			}
		}
		finally
		{
			TraceOut("ESC_SEQ", 12);
			LeaveRule("ESC_SEQ", 12);
			LeaveRule_ESC_SEQ();
		}
	}
	// $ANTLR end "ESC_SEQ"

	partial void EnterRule_OCTAL_ESC();
	partial void LeaveRule_OCTAL_ESC();

	// $ANTLR start "OCTAL_ESC"
	[GrammarRule("OCTAL_ESC")]
	private void mOCTAL_ESC()
	{
		EnterRule_OCTAL_ESC();
		EnterRule("OCTAL_ESC", 13);
		TraceIn("OCTAL_ESC", 13);
		try
		{
			// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:64:5: ( '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) )
			int alt19=3;
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if ((LA19_0=='\\'))
			{
				int LA19_1 = input.LA(2);

				if (((LA19_1>='0' && LA19_1<='3')))
				{
					int LA19_2 = input.LA(3);

					if (((LA19_2>='0' && LA19_2<='7')))
					{
						int LA19_4 = input.LA(4);

						if (((LA19_4>='0' && LA19_4<='7')))
						{
							alt19 = 1;
						}
						else
						{
							alt19 = 2;
						}
					}
					else
					{
						alt19 = 3;
					}
				}
				else if (((LA19_1>='4' && LA19_1<='7')))
				{
					int LA19_3 = input.LA(3);

					if (((LA19_3>='0' && LA19_3<='7')))
					{
						alt19 = 2;
					}
					else
					{
						alt19 = 3;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 19, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 19, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:64:9: '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' )
				{
				DebugLocation(64, 9);
				Match('\\'); 
				DebugLocation(64, 14);
				input.Consume();

				DebugLocation(64, 25);
				input.Consume();

				DebugLocation(64, 36);
				input.Consume();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:65:9: '\\\\' ( '0' .. '7' ) ( '0' .. '7' )
				{
				DebugLocation(65, 9);
				Match('\\'); 
				DebugLocation(65, 14);
				input.Consume();

				DebugLocation(65, 25);
				input.Consume();


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:66:9: '\\\\' ( '0' .. '7' )
				{
				DebugLocation(66, 9);
				Match('\\'); 
				DebugLocation(66, 14);
				input.Consume();


				}
				break;

			}
		}
		finally
		{
			TraceOut("OCTAL_ESC", 13);
			LeaveRule("OCTAL_ESC", 13);
			LeaveRule_OCTAL_ESC();
		}
	}
	// $ANTLR end "OCTAL_ESC"

	partial void EnterRule_UNICODE_ESC();
	partial void LeaveRule_UNICODE_ESC();

	// $ANTLR start "UNICODE_ESC"
	[GrammarRule("UNICODE_ESC")]
	private void mUNICODE_ESC()
	{
		EnterRule_UNICODE_ESC();
		EnterRule("UNICODE_ESC", 14);
		TraceIn("UNICODE_ESC", 14);
		try
		{
			// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:71:5: ( '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT )
			DebugEnterAlt(1);
			// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:71:9: '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
			{
			DebugLocation(71, 9);
			Match('\\'); 
			DebugLocation(71, 14);
			Match('u'); 
			DebugLocation(71, 18);
			mHEX_DIGIT(); 
			DebugLocation(71, 28);
			mHEX_DIGIT(); 
			DebugLocation(71, 38);
			mHEX_DIGIT(); 
			DebugLocation(71, 48);
			mHEX_DIGIT(); 

			}

		}
		finally
		{
			TraceOut("UNICODE_ESC", 14);
			LeaveRule("UNICODE_ESC", 14);
			LeaveRule_UNICODE_ESC();
		}
	}
	// $ANTLR end "UNICODE_ESC"

	public override void mTokens()
	{
		// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:1:8: ( T__16 | T__17 | ID | INT | FLOAT | COMMENT | WS | STRING | CHAR )
		int alt20=9;
		try { DebugEnterDecision(20, false);
		try
		{
			alt20 = dfa20.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(20); }
		switch (alt20)
		{
		case 1:
			DebugEnterAlt(1);
			// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:1:10: T__16
			{
			DebugLocation(1, 10);
			mT__16(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:1:16: T__17
			{
			DebugLocation(1, 16);
			mT__17(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:1:22: ID
			{
			DebugLocation(1, 22);
			mID(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:1:25: INT
			{
			DebugLocation(1, 25);
			mINT(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:1:29: FLOAT
			{
			DebugLocation(1, 29);
			mFLOAT(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:1:35: COMMENT
			{
			DebugLocation(1, 35);
			mCOMMENT(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:1:43: WS
			{
			DebugLocation(1, 43);
			mWS(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:1:46: STRING
			{
			DebugLocation(1, 46);
			mSTRING(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// C:\\dat\\repository\\personal\\dev\\projects\\loblang\\src\\xmlpl-parser\\mccarthy.g3:1:53: CHAR
			{
			DebugLocation(1, 53);
			mCHAR(); 

			}
			break;

		}

	}


	#region DFA
	DFA9 dfa9;
	DFA20 dfa20;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa9 = new DFA9(this);
		dfa20 = new DFA20(this);
	}

	private class DFA9 : DFA
	{
		private const string DFA9_eotS =
			"\x5\xFFFF";
		private const string DFA9_eofS =
			"\x5\xFFFF";
		private const string DFA9_minS =
			"\x2\x2E\x3\xFFFF";
		private const string DFA9_maxS =
			"\x1\x39\x1\x65\x3\xFFFF";
		private const string DFA9_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1\x1\x3";
		private const string DFA9_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA9_transitionS =
			{
				"\x1\x2\x1\xFFFF\xA\x1",
				"\x1\x3\x1\xFFFF\xA\x1\xB\xFFFF\x1\x4\x1F\xFFFF\x1\x4",
				"",
				"",
				""
			};

		private static readonly short[] DFA9_eot = DFA.UnpackEncodedString(DFA9_eotS);
		private static readonly short[] DFA9_eof = DFA.UnpackEncodedString(DFA9_eofS);
		private static readonly char[] DFA9_min = DFA.UnpackEncodedStringToUnsignedChars(DFA9_minS);
		private static readonly char[] DFA9_max = DFA.UnpackEncodedStringToUnsignedChars(DFA9_maxS);
		private static readonly short[] DFA9_accept = DFA.UnpackEncodedString(DFA9_acceptS);
		private static readonly short[] DFA9_special = DFA.UnpackEncodedString(DFA9_specialS);
		private static readonly short[][] DFA9_transition;

		static DFA9()
		{
			int numStates = DFA9_transitionS.Length;
			DFA9_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA9_transition[i] = DFA.UnpackEncodedString(DFA9_transitionS[i]);
			}
		}

		public DFA9( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 9;
			this.eot = DFA9_eot;
			this.eof = DFA9_eof;
			this.min = DFA9_min;
			this.max = DFA9_max;
			this.accept = DFA9_accept;
			this.special = DFA9_special;
			this.transition = DFA9_transition;
		}

		public override string Description { get { return "23:1: FLOAT : ( ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )? | '.' ( '0' .. '9' )+ ( EXPONENT )? | ( '0' .. '9' )+ EXPONENT );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA20 : DFA
	{
		private const string DFA20_eotS =
			"\x2\xFFFF\x1\x3\x1\xFFFF\x1\xB\x5\xFFFF\x1\x3\x1\xFFFF\x3\x3\x1\x10\x1"+
			"\xFFFF";
		private const string DFA20_eofS =
			"\x11\xFFFF";
		private const string DFA20_minS =
			"\x1\x9\x1\xFFFF\x1\x6F\x1\xFFFF\x1\x2E\x5\xFFFF\x1\x64\x1\xFFFF\x1\x75"+
			"\x1\x6C\x1\x65\x1\x30\x1\xFFFF";
		private const string DFA20_maxS =
			"\x1\x7A\x1\xFFFF\x1\x6F\x1\xFFFF\x1\x65\x5\xFFFF\x1\x64\x1\xFFFF\x1\x75"+
			"\x1\x6C\x1\x65\x1\x7A\x1\xFFFF";
		private const string DFA20_acceptS =
			"\x1\xFFFF\x1\x1\x1\xFFFF\x1\x3\x1\xFFFF\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9"+
			"\x1\xFFFF\x1\x4\x4\xFFFF\x1\x2";
		private const string DFA20_specialS =
			"\x11\xFFFF}>";
		private static readonly string[] DFA20_transitionS =
			{
				"\x2\x7\x2\xFFFF\x1\x7\x12\xFFFF\x1\x7\x1\xFFFF\x1\x8\x4\xFFFF\x1\x9"+
				"\x6\xFFFF\x1\x5\x1\x6\xA\x4\x1\xFFFF\x1\x1\x5\xFFFF\x1A\x3\x4\xFFFF"+
				"\x1\x3\x1\xFFFF\xC\x3\x1\x2\xD\x3",
				"",
				"\x1\xA",
				"",
				"\x1\x5\x1\xFFFF\xA\x4\xB\xFFFF\x1\x5\x1F\xFFFF\x1\x5",
				"",
				"",
				"",
				"",
				"",
				"\x1\xC",
				"",
				"\x1\xD",
				"\x1\xE",
				"\x1\xF",
				"\xA\x3\x7\xFFFF\x1A\x3\x4\xFFFF\x1\x3\x1\xFFFF\x1A\x3",
				""
			};

		private static readonly short[] DFA20_eot = DFA.UnpackEncodedString(DFA20_eotS);
		private static readonly short[] DFA20_eof = DFA.UnpackEncodedString(DFA20_eofS);
		private static readonly char[] DFA20_min = DFA.UnpackEncodedStringToUnsignedChars(DFA20_minS);
		private static readonly char[] DFA20_max = DFA.UnpackEncodedStringToUnsignedChars(DFA20_maxS);
		private static readonly short[] DFA20_accept = DFA.UnpackEncodedString(DFA20_acceptS);
		private static readonly short[] DFA20_special = DFA.UnpackEncodedString(DFA20_specialS);
		private static readonly short[][] DFA20_transition;

		static DFA20()
		{
			int numStates = DFA20_transitionS.Length;
			DFA20_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA20_transition[i] = DFA.UnpackEncodedString(DFA20_transitionS[i]);
			}
		}

		public DFA20( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 20;
			this.eot = DFA20_eot;
			this.eof = DFA20_eof;
			this.min = DFA20_min;
			this.max = DFA20_max;
			this.accept = DFA20_accept;
			this.special = DFA20_special;
			this.transition = DFA20_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( T__16 | T__17 | ID | INT | FLOAT | COMMENT | WS | STRING | CHAR );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

 
	#endregion

}

} // namespace xmlpl_parser
