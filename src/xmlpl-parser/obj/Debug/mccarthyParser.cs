//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.3.1.7705
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.3.1.7705 mccarthy.g3 2012-03-20 21:20:24

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162


using System;


using System.Collections.Generic;
using Antlr.Runtime;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace xmlpl_parser
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.3.1.7705")]
[System.CLSCompliant(false)]
public partial class mccarthyParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "APPEND", "ARG", "ARGLIST", "BINDING", "BLOCK", "COMMENT", "DIGIT", "FUNCBODY", "FUNCDEC", "FUNCDECLIST", "GENERIC_ID", "ID", "INT", "Imports", "LETTER", "MATCH", "MATCHOP", "NAMECHAR", "PATH", "PATHCTX", "PREPEND", "REPLACE", "ROOT", "SEG", "STRING", "TEXT", "VALINT", "VALSTR", "VARREF", "WS", "XML", "XMLATTR", "XMLATTRS", "XMLCHILDREN", "XMLCLOSEELEM", "XMLOPENELEM", "XMLTEXT", "'!'", "'!='", "'$'", "'('", "')'", "','", "'->'", "'/'", "'/>'", "':'", "';'", "'<'", "'<?'", "'='", "'=<'", "'=='", "'=>'", "'=><'", "'=>>'", "'>'", "'?'", "'?>'", "'import'", "'module'", "'{'", "'}'"
	};
	public const int EOF=-1;
	public const int APPEND=4;
	public const int ARG=5;
	public const int ARGLIST=6;
	public const int BINDING=7;
	public const int BLOCK=8;
	public const int COMMENT=9;
	public const int DIGIT=10;
	public const int FUNCBODY=11;
	public const int FUNCDEC=12;
	public const int FUNCDECLIST=13;
	public const int GENERIC_ID=14;
	public const int ID=15;
	public const int INT=16;
	public const int Imports=17;
	public const int LETTER=18;
	public const int MATCH=19;
	public const int MATCHOP=20;
	public const int NAMECHAR=21;
	public const int PATH=22;
	public const int PATHCTX=23;
	public const int PREPEND=24;
	public const int REPLACE=25;
	public const int ROOT=26;
	public const int SEG=27;
	public const int STRING=28;
	public const int TEXT=29;
	public const int VALINT=30;
	public const int VALSTR=31;
	public const int VARREF=32;
	public const int WS=33;
	public const int XML=34;
	public const int XMLATTR=35;
	public const int XMLATTRS=36;
	public const int XMLCHILDREN=37;
	public const int XMLCLOSEELEM=38;
	public const int XMLOPENELEM=39;
	public const int XMLTEXT=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;
	public const int T__50=50;
	public const int T__51=51;
	public const int T__52=52;
	public const int T__53=53;
	public const int T__54=54;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int T__59=59;
	public const int T__60=60;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;

	// delegates
	// delegators

	public mccarthyParser( ITokenStream input )
		: this( input, new RecognizerSharedState() )
	{
	}
	public mccarthyParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);

		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();


		OnCreated();
	}
		
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return mccarthyParser.tokenNames; } }
	public override string GrammarFileName { get { return "mccarthy.g3"; } }


	public bool expectingXml = false;


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	public sealed partial class module_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public module_return(mccarthyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(mccarthyParser grammar);
	}

	partial void EnterRule_module();
	partial void LeaveRule_module();

	// $ANTLR start "module"
	// mccarthy.g3:91:8: public module : md= moduleDeclaration id= importDeclarations fd= functionDeclarations EOF -> ^( ROOT $md ( ^( Imports $id) )? ( ^( FUNCDECLIST $fd) )? ) ;
	[GrammarRule("module")]
	public mccarthyParser.module_return module()
	{
		EnterRule_module();
		EnterRule("module", 1);
		TraceIn("module", 1);
		mccarthyParser.module_return retval = new mccarthyParser.module_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken EOF1 = default(CommonToken);
		mccarthyParser.moduleDeclaration_return md = default(mccarthyParser.moduleDeclaration_return);
		mccarthyParser.importDeclarations_return id = default(mccarthyParser.importDeclarations_return);
		mccarthyParser.functionDeclarations_return fd = default(mccarthyParser.functionDeclarations_return);

		CommonTree EOF1_tree = default(CommonTree);
		RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_moduleDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule moduleDeclaration");
		RewriteRuleSubtreeStream stream_importDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule importDeclarations");
		RewriteRuleSubtreeStream stream_functionDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule functionDeclarations");
		try { DebugEnterRule(GrammarFileName, "module");
		DebugLocation(91, 4);
		try
		{
			// mccarthy.g3:92:5: (md= moduleDeclaration id= importDeclarations fd= functionDeclarations EOF -> ^( ROOT $md ( ^( Imports $id) )? ( ^( FUNCDECLIST $fd) )? ) )
			DebugEnterAlt(1);
			// mccarthy.g3:92:9: md= moduleDeclaration id= importDeclarations fd= functionDeclarations EOF
			{
			DebugLocation(92, 11);
			PushFollow(Follow._moduleDeclaration_in_module578);
			md=moduleDeclaration();
			PopFollow();

			stream_moduleDeclaration.Add(md.Tree);
			DebugLocation(93, 8);
			PushFollow(Follow._importDeclarations_in_module588);
			id=importDeclarations();
			PopFollow();

			stream_importDeclarations.Add(id.Tree);
			DebugLocation(94, 8);
			PushFollow(Follow._functionDeclarations_in_module597);
			fd=functionDeclarations();
			PopFollow();

			stream_functionDeclarations.Add(fd.Tree);
			DebugLocation(95, 6);
			EOF1=(CommonToken)Match(input,EOF,Follow._EOF_in_module604);  
			stream_EOF.Add(EOF1);



			{
			// AST REWRITE
			// elements: md, id, fd
			// token labels: 
			// rule labels: md, id, fd, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_md=new RewriteRuleSubtreeStream(adaptor,"rule md",md!=null?md.Tree:null);
			RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
			RewriteRuleSubtreeStream stream_fd=new RewriteRuleSubtreeStream(adaptor,"rule fd",fd!=null?fd.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 95:10: -> ^( ROOT $md ( ^( Imports $id) )? ( ^( FUNCDECLIST $fd) )? )
			{
				DebugLocation(95, 13);
				// mccarthy.g3:95:13: ^( ROOT $md ( ^( Imports $id) )? ( ^( FUNCDECLIST $fd) )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(95, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ROOT, "ROOT"), root_1);

				DebugLocation(95, 21);
				adaptor.AddChild(root_1, stream_md.NextTree());
				DebugLocation(96, 6);
				// mccarthy.g3:96:6: ( ^( Imports $id) )?
				if (stream_id.HasNext)
				{
					DebugLocation(96, 6);
					// mccarthy.g3:96:6: ^( Imports $id)
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(96, 8);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Imports, "Imports"), root_2);

					DebugLocation(96, 17);
					adaptor.AddChild(root_2, stream_id.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_id.Reset();
				DebugLocation(97, 6);
				// mccarthy.g3:97:6: ( ^( FUNCDECLIST $fd) )?
				if (stream_fd.HasNext)
				{
					DebugLocation(97, 6);
					// mccarthy.g3:97:6: ^( FUNCDECLIST $fd)
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(97, 8);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FUNCDECLIST, "FUNCDECLIST"), root_2);

					DebugLocation(97, 21);
					adaptor.AddChild(root_2, stream_fd.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_fd.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("module", 1);
			LeaveRule("module", 1);
			LeaveRule_module();
		}
		DebugLocation(99, 4);
		} finally { DebugExitRule(GrammarFileName, "module"); }
		return retval;

	}
	// $ANTLR end "module"

	private sealed partial class importDeclarations_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public importDeclarations_return(mccarthyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(mccarthyParser grammar);
	}

	partial void EnterRule_importDeclarations();
	partial void LeaveRule_importDeclarations();

	// $ANTLR start "importDeclarations"
	// mccarthy.g3:100:1: importDeclarations : ( importDeclaration )* ;
	[GrammarRule("importDeclarations")]
	private mccarthyParser.importDeclarations_return importDeclarations()
	{
		EnterRule_importDeclarations();
		EnterRule("importDeclarations", 2);
		TraceIn("importDeclarations", 2);
		mccarthyParser.importDeclarations_return retval = new mccarthyParser.importDeclarations_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		mccarthyParser.importDeclaration_return importDeclaration2 = default(mccarthyParser.importDeclaration_return);


		try { DebugEnterRule(GrammarFileName, "importDeclarations");
		DebugLocation(100, 1);
		try
		{
			// mccarthy.g3:101:2: ( ( importDeclaration )* )
			DebugEnterAlt(1);
			// mccarthy.g3:101:4: ( importDeclaration )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(101, 4);
			// mccarthy.g3:101:4: ( importDeclaration )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==63))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// mccarthy.g3:101:5: importDeclaration
					{
					DebugLocation(101, 5);
					PushFollow(Follow._importDeclaration_in_importDeclarations660);
					importDeclaration2=importDeclaration();
					PopFollow();

					adaptor.AddChild(root_0, importDeclaration2.Tree);

					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("importDeclarations", 2);
			LeaveRule("importDeclarations", 2);
			LeaveRule_importDeclarations();
		}
		DebugLocation(102, 1);
		} finally { DebugExitRule(GrammarFileName, "importDeclarations"); }
		return retval;

	}
	// $ANTLR end "importDeclarations"

	private sealed partial class importDeclaration_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public importDeclaration_return(mccarthyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(mccarthyParser grammar);
	}

	partial void EnterRule_importDeclaration();
	partial void LeaveRule_importDeclaration();

	// $ANTLR start "importDeclaration"
	// mccarthy.g3:104:1: importDeclaration : 'import' ID ';' -> ^( 'import' ID ) ;
	[GrammarRule("importDeclaration")]
	private mccarthyParser.importDeclaration_return importDeclaration()
	{
		EnterRule_importDeclaration();
		EnterRule("importDeclaration", 3);
		TraceIn("importDeclaration", 3);
		mccarthyParser.importDeclaration_return retval = new mccarthyParser.importDeclaration_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal3 = default(CommonToken);
		CommonToken ID4 = default(CommonToken);
		CommonToken char_literal5 = default(CommonToken);

		CommonTree string_literal3_tree = default(CommonTree);
		CommonTree ID4_tree = default(CommonTree);
		CommonTree char_literal5_tree = default(CommonTree);
		RewriteRuleITokenStream stream_63=new RewriteRuleITokenStream(adaptor,"token 63");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_51=new RewriteRuleITokenStream(adaptor,"token 51");

		try { DebugEnterRule(GrammarFileName, "importDeclaration");
		DebugLocation(104, 37);
		try
		{
			// mccarthy.g3:105:2: ( 'import' ID ';' -> ^( 'import' ID ) )
			DebugEnterAlt(1);
			// mccarthy.g3:105:4: 'import' ID ';'
			{
			DebugLocation(105, 4);
			string_literal3=(CommonToken)Match(input,63,Follow._63_in_importDeclaration673);  
			stream_63.Add(string_literal3);

			DebugLocation(105, 13);
			ID4=(CommonToken)Match(input,ID,Follow._ID_in_importDeclaration675);  
			stream_ID.Add(ID4);

			DebugLocation(105, 16);
			char_literal5=(CommonToken)Match(input,51,Follow._51_in_importDeclaration677);  
			stream_51.Add(char_literal5);



			{
			// AST REWRITE
			// elements: 63, ID
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 105:20: -> ^( 'import' ID )
			{
				DebugLocation(105, 23);
				// mccarthy.g3:105:23: ^( 'import' ID )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(105, 25);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_63.NextNode(), root_1);

				DebugLocation(105, 34);
				adaptor.AddChild(root_1, stream_ID.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("importDeclaration", 3);
			LeaveRule("importDeclaration", 3);
			LeaveRule_importDeclaration();
		}
		DebugLocation(105, 37);
		} finally { DebugExitRule(GrammarFileName, "importDeclaration"); }
		return retval;

	}
	// $ANTLR end "importDeclaration"

	private sealed partial class moduleDeclaration_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public moduleDeclaration_return(mccarthyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(mccarthyParser grammar);
	}

	partial void EnterRule_moduleDeclaration();
	partial void LeaveRule_moduleDeclaration();

	// $ANTLR start "moduleDeclaration"
	// mccarthy.g3:107:1: moduleDeclaration : 'module' ID ';' -> ^( 'module' ID ) ;
	[GrammarRule("moduleDeclaration")]
	private mccarthyParser.moduleDeclaration_return moduleDeclaration()
	{
		EnterRule_moduleDeclaration();
		EnterRule("moduleDeclaration", 4);
		TraceIn("moduleDeclaration", 4);
		mccarthyParser.moduleDeclaration_return retval = new mccarthyParser.moduleDeclaration_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal6 = default(CommonToken);
		CommonToken ID7 = default(CommonToken);
		CommonToken char_literal8 = default(CommonToken);

		CommonTree string_literal6_tree = default(CommonTree);
		CommonTree ID7_tree = default(CommonTree);
		CommonTree char_literal8_tree = default(CommonTree);
		RewriteRuleITokenStream stream_64=new RewriteRuleITokenStream(adaptor,"token 64");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_51=new RewriteRuleITokenStream(adaptor,"token 51");

		try { DebugEnterRule(GrammarFileName, "moduleDeclaration");
		DebugLocation(107, 1);
		try
		{
			// mccarthy.g3:108:2: ( 'module' ID ';' -> ^( 'module' ID ) )
			DebugEnterAlt(1);
			// mccarthy.g3:108:4: 'module' ID ';'
			{
			DebugLocation(108, 4);
			string_literal6=(CommonToken)Match(input,64,Follow._64_in_moduleDeclaration695);  
			stream_64.Add(string_literal6);

			DebugLocation(108, 13);
			ID7=(CommonToken)Match(input,ID,Follow._ID_in_moduleDeclaration697);  
			stream_ID.Add(ID7);

			DebugLocation(108, 16);
			char_literal8=(CommonToken)Match(input,51,Follow._51_in_moduleDeclaration699);  
			stream_51.Add(char_literal8);



			{
			// AST REWRITE
			// elements: 64, ID
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 108:20: -> ^( 'module' ID )
			{
				DebugLocation(108, 23);
				// mccarthy.g3:108:23: ^( 'module' ID )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(108, 25);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_64.NextNode(), root_1);

				DebugLocation(108, 34);
				adaptor.AddChild(root_1, stream_ID.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("moduleDeclaration", 4);
			LeaveRule("moduleDeclaration", 4);
			LeaveRule_moduleDeclaration();
		}
		DebugLocation(109, 1);
		} finally { DebugExitRule(GrammarFileName, "moduleDeclaration"); }
		return retval;

	}
	// $ANTLR end "moduleDeclaration"

	private sealed partial class functionDeclarations_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public functionDeclarations_return(mccarthyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(mccarthyParser grammar);
	}

	partial void EnterRule_functionDeclarations();
	partial void LeaveRule_functionDeclarations();

	// $ANTLR start "functionDeclarations"
	// mccarthy.g3:111:1: functionDeclarations : ( functionDeclaration )* ;
	[GrammarRule("functionDeclarations")]
	private mccarthyParser.functionDeclarations_return functionDeclarations()
	{
		EnterRule_functionDeclarations();
		EnterRule("functionDeclarations", 5);
		TraceIn("functionDeclarations", 5);
		mccarthyParser.functionDeclarations_return retval = new mccarthyParser.functionDeclarations_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		mccarthyParser.functionDeclaration_return functionDeclaration9 = default(mccarthyParser.functionDeclaration_return);


		try { DebugEnterRule(GrammarFileName, "functionDeclarations");
		DebugLocation(111, 1);
		try
		{
			// mccarthy.g3:112:2: ( ( functionDeclaration )* )
			DebugEnterAlt(1);
			// mccarthy.g3:112:4: ( functionDeclaration )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(112, 4);
			// mccarthy.g3:112:4: ( functionDeclaration )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_0 = input.LA(1);

				if ((LA2_0==ID))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// mccarthy.g3:112:5: functionDeclaration
					{
					DebugLocation(112, 5);
					PushFollow(Follow._functionDeclaration_in_functionDeclarations719);
					functionDeclaration9=functionDeclaration();
					PopFollow();

					adaptor.AddChild(root_0, functionDeclaration9.Tree);

					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functionDeclarations", 5);
			LeaveRule("functionDeclarations", 5);
			LeaveRule_functionDeclarations();
		}
		DebugLocation(113, 1);
		} finally { DebugExitRule(GrammarFileName, "functionDeclarations"); }
		return retval;

	}
	// $ANTLR end "functionDeclarations"

	private sealed partial class functionDeclaration_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public functionDeclaration_return(mccarthyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(mccarthyParser grammar);
	}

	partial void EnterRule_functionDeclaration();
	partial void LeaveRule_functionDeclaration();

	// $ANTLR start "functionDeclaration"
	// mccarthy.g3:115:1: functionDeclaration : functionName= ID '(' al= argList ')' '{' sl= statements '}' -> ^( FUNCDEC $functionName ( ^( ARGLIST $al) )? ( ^( FUNCBODY $sl) )? ) ;
	[GrammarRule("functionDeclaration")]
	private mccarthyParser.functionDeclaration_return functionDeclaration()
	{
		EnterRule_functionDeclaration();
		EnterRule("functionDeclaration", 6);
		TraceIn("functionDeclaration", 6);
		mccarthyParser.functionDeclaration_return retval = new mccarthyParser.functionDeclaration_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken functionName = default(CommonToken);
		CommonToken char_literal10 = default(CommonToken);
		CommonToken char_literal11 = default(CommonToken);
		CommonToken char_literal12 = default(CommonToken);
		CommonToken char_literal13 = default(CommonToken);
		mccarthyParser.argList_return al = default(mccarthyParser.argList_return);
		mccarthyParser.statements_return sl = default(mccarthyParser.statements_return);

		CommonTree functionName_tree = default(CommonTree);
		CommonTree char_literal10_tree = default(CommonTree);
		CommonTree char_literal11_tree = default(CommonTree);
		CommonTree char_literal12_tree = default(CommonTree);
		CommonTree char_literal13_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_44=new RewriteRuleITokenStream(adaptor,"token 44");
		RewriteRuleITokenStream stream_45=new RewriteRuleITokenStream(adaptor,"token 45");
		RewriteRuleITokenStream stream_65=new RewriteRuleITokenStream(adaptor,"token 65");
		RewriteRuleITokenStream stream_66=new RewriteRuleITokenStream(adaptor,"token 66");
		RewriteRuleSubtreeStream stream_argList=new RewriteRuleSubtreeStream(adaptor,"rule argList");
		RewriteRuleSubtreeStream stream_statements=new RewriteRuleSubtreeStream(adaptor,"rule statements");
		try { DebugEnterRule(GrammarFileName, "functionDeclaration");
		DebugLocation(115, 1);
		try
		{
			// mccarthy.g3:116:2: (functionName= ID '(' al= argList ')' '{' sl= statements '}' -> ^( FUNCDEC $functionName ( ^( ARGLIST $al) )? ( ^( FUNCBODY $sl) )? ) )
			DebugEnterAlt(1);
			// mccarthy.g3:116:4: functionName= ID '(' al= argList ')' '{' sl= statements '}'
			{
			DebugLocation(116, 16);
			functionName=(CommonToken)Match(input,ID,Follow._ID_in_functionDeclaration734);  
			stream_ID.Add(functionName);

			DebugLocation(116, 20);
			char_literal10=(CommonToken)Match(input,44,Follow._44_in_functionDeclaration736);  
			stream_44.Add(char_literal10);

			DebugLocation(116, 26);
			PushFollow(Follow._argList_in_functionDeclaration740);
			al=argList();
			PopFollow();

			stream_argList.Add(al.Tree);
			DebugLocation(116, 35);
			char_literal11=(CommonToken)Match(input,45,Follow._45_in_functionDeclaration742);  
			stream_45.Add(char_literal11);

			DebugLocation(116, 39);
			char_literal12=(CommonToken)Match(input,65,Follow._65_in_functionDeclaration744);  
			stream_65.Add(char_literal12);

			DebugLocation(116, 45);
			PushFollow(Follow._statements_in_functionDeclaration748);
			sl=statements();
			PopFollow();

			stream_statements.Add(sl.Tree);
			DebugLocation(116, 57);
			char_literal13=(CommonToken)Match(input,66,Follow._66_in_functionDeclaration750);  
			stream_66.Add(char_literal13);



			{
			// AST REWRITE
			// elements: functionName, al, sl
			// token labels: functionName
			// rule labels: al, sl, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleITokenStream stream_functionName=new RewriteRuleITokenStream(adaptor,"token functionName",functionName);
			RewriteRuleSubtreeStream stream_al=new RewriteRuleSubtreeStream(adaptor,"rule al",al!=null?al.Tree:null);
			RewriteRuleSubtreeStream stream_sl=new RewriteRuleSubtreeStream(adaptor,"rule sl",sl!=null?sl.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 117:3: -> ^( FUNCDEC $functionName ( ^( ARGLIST $al) )? ( ^( FUNCBODY $sl) )? )
			{
				DebugLocation(117, 6);
				// mccarthy.g3:117:6: ^( FUNCDEC $functionName ( ^( ARGLIST $al) )? ( ^( FUNCBODY $sl) )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(117, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FUNCDEC, "FUNCDEC"), root_1);

				DebugLocation(117, 17);
				adaptor.AddChild(root_1, stream_functionName.NextNode());
				DebugLocation(117, 30);
				// mccarthy.g3:117:30: ( ^( ARGLIST $al) )?
				if (stream_al.HasNext)
				{
					DebugLocation(117, 30);
					// mccarthy.g3:117:30: ^( ARGLIST $al)
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(117, 32);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARGLIST, "ARGLIST"), root_2);

					DebugLocation(117, 41);
					adaptor.AddChild(root_2, stream_al.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_al.Reset();
				DebugLocation(117, 46);
				// mccarthy.g3:117:46: ( ^( FUNCBODY $sl) )?
				if (stream_sl.HasNext)
				{
					DebugLocation(117, 46);
					// mccarthy.g3:117:46: ^( FUNCBODY $sl)
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(117, 48);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FUNCBODY, "FUNCBODY"), root_2);

					DebugLocation(117, 58);
					adaptor.AddChild(root_2, stream_sl.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_sl.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functionDeclaration", 6);
			LeaveRule("functionDeclaration", 6);
			LeaveRule_functionDeclaration();
		}
		DebugLocation(118, 1);
		} finally { DebugExitRule(GrammarFileName, "functionDeclaration"); }
		return retval;

	}
	// $ANTLR end "functionDeclaration"

	private sealed partial class argList_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public argList_return(mccarthyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(mccarthyParser grammar);
	}

	partial void EnterRule_argList();
	partial void LeaveRule_argList();

	// $ANTLR start "argList"
	// mccarthy.g3:120:1: argList : arg ( ',' arg )* -> ( arg )+ ;
	[GrammarRule("argList")]
	private mccarthyParser.argList_return argList()
	{
		EnterRule_argList();
		EnterRule("argList", 7);
		TraceIn("argList", 7);
		mccarthyParser.argList_return retval = new mccarthyParser.argList_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal15 = default(CommonToken);
		mccarthyParser.arg_return arg14 = default(mccarthyParser.arg_return);
		mccarthyParser.arg_return arg16 = default(mccarthyParser.arg_return);

		CommonTree char_literal15_tree = default(CommonTree);
		RewriteRuleITokenStream stream_46=new RewriteRuleITokenStream(adaptor,"token 46");
		RewriteRuleSubtreeStream stream_arg=new RewriteRuleSubtreeStream(adaptor,"rule arg");
		try { DebugEnterRule(GrammarFileName, "argList");
		DebugLocation(120, 1);
		try
		{
			// mccarthy.g3:121:2: ( arg ( ',' arg )* -> ( arg )+ )
			DebugEnterAlt(1);
			// mccarthy.g3:121:4: arg ( ',' arg )*
			{
			DebugLocation(121, 4);
			PushFollow(Follow._arg_in_argList788);
			arg14=arg();
			PopFollow();

			stream_arg.Add(arg14.Tree);
			DebugLocation(121, 8);
			// mccarthy.g3:121:8: ( ',' arg )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==46))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// mccarthy.g3:121:9: ',' arg
					{
					DebugLocation(121, 9);
					char_literal15=(CommonToken)Match(input,46,Follow._46_in_argList791);  
					stream_46.Add(char_literal15);

					DebugLocation(121, 13);
					PushFollow(Follow._arg_in_argList793);
					arg16=arg();
					PopFollow();

					stream_arg.Add(arg16.Tree);

					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }



			{
			// AST REWRITE
			// elements: arg
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 122:3: -> ( arg )+
			{
				DebugLocation(122, 6);
				if (!(stream_arg.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_arg.HasNext )
				{
					DebugLocation(122, 6);
					adaptor.AddChild(root_0, stream_arg.NextTree());

				}
				stream_arg.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("argList", 7);
			LeaveRule("argList", 7);
			LeaveRule_argList();
		}
		DebugLocation(123, 1);
		} finally { DebugExitRule(GrammarFileName, "argList"); }
		return retval;

	}
	// $ANTLR end "argList"

	private sealed partial class arg_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public arg_return(mccarthyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(mccarthyParser grammar);
	}

	partial void EnterRule_arg();
	partial void LeaveRule_arg();

	// $ANTLR start "arg"
	// mccarthy.g3:125:1: arg : argName= ID ':' type= ID -> ^( ARG $argName $type) ;
	[GrammarRule("arg")]
	private mccarthyParser.arg_return arg()
	{
		EnterRule_arg();
		EnterRule("arg", 8);
		TraceIn("arg", 8);
		mccarthyParser.arg_return retval = new mccarthyParser.arg_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken argName = default(CommonToken);
		CommonToken type = default(CommonToken);
		CommonToken char_literal17 = default(CommonToken);

		CommonTree argName_tree = default(CommonTree);
		CommonTree type_tree = default(CommonTree);
		CommonTree char_literal17_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_50=new RewriteRuleITokenStream(adaptor,"token 50");

		try { DebugEnterRule(GrammarFileName, "arg");
		DebugLocation(125, 1);
		try
		{
			// mccarthy.g3:126:2: (argName= ID ':' type= ID -> ^( ARG $argName $type) )
			DebugEnterAlt(1);
			// mccarthy.g3:126:4: argName= ID ':' type= ID
			{
			DebugLocation(126, 11);
			argName=(CommonToken)Match(input,ID,Follow._ID_in_arg815);  
			stream_ID.Add(argName);

			DebugLocation(126, 15);
			char_literal17=(CommonToken)Match(input,50,Follow._50_in_arg817);  
			stream_50.Add(char_literal17);

			DebugLocation(126, 23);
			type=(CommonToken)Match(input,ID,Follow._ID_in_arg821);  
			stream_ID.Add(type);



			{
			// AST REWRITE
			// elements: argName, type
			// token labels: argName, type
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleITokenStream stream_argName=new RewriteRuleITokenStream(adaptor,"token argName",argName);
			RewriteRuleITokenStream stream_type=new RewriteRuleITokenStream(adaptor,"token type",type);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 127:3: -> ^( ARG $argName $type)
			{
				DebugLocation(127, 6);
				// mccarthy.g3:127:6: ^( ARG $argName $type)
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(127, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARG, "ARG"), root_1);

				DebugLocation(127, 13);
				adaptor.AddChild(root_1, stream_argName.NextNode());
				DebugLocation(127, 22);
				adaptor.AddChild(root_1, stream_type.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arg", 8);
			LeaveRule("arg", 8);
			LeaveRule_arg();
		}
		DebugLocation(128, 1);
		} finally { DebugExitRule(GrammarFileName, "arg"); }
		return retval;

	}
	// $ANTLR end "arg"

	private sealed partial class statements_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public statements_return(mccarthyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(mccarthyParser grammar);
	}

	partial void EnterRule_statements();
	partial void LeaveRule_statements();

	// $ANTLR start "statements"
	// mccarthy.g3:129:1: statements : ( statement ';' )* -> ^( BLOCK ( statement )* ) ;
	[GrammarRule("statements")]
	private mccarthyParser.statements_return statements()
	{
		EnterRule_statements();
		EnterRule("statements", 9);
		TraceIn("statements", 9);
		mccarthyParser.statements_return retval = new mccarthyParser.statements_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal19 = default(CommonToken);
		mccarthyParser.statement_return statement18 = default(mccarthyParser.statement_return);

		CommonTree char_literal19_tree = default(CommonTree);
		RewriteRuleITokenStream stream_51=new RewriteRuleITokenStream(adaptor,"token 51");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		try { DebugEnterRule(GrammarFileName, "statements");
		DebugLocation(129, 1);
		try
		{
			// mccarthy.g3:130:2: ( ( statement ';' )* -> ^( BLOCK ( statement )* ) )
			DebugEnterAlt(1);
			// mccarthy.g3:131:2: ( statement ';' )*
			{
			DebugLocation(131, 2);
			// mccarthy.g3:131:2: ( statement ';' )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_0 = input.LA(1);

				if ((LA4_0==ID||LA4_0==43))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// mccarthy.g3:131:3: statement ';'
					{
					DebugLocation(131, 3);
					PushFollow(Follow._statement_in_statements849);
					statement18=statement();
					PopFollow();

					stream_statement.Add(statement18.Tree);
					DebugLocation(131, 13);
					char_literal19=(CommonToken)Match(input,51,Follow._51_in_statements851);  
					stream_51.Add(char_literal19);


					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }



			{
			// AST REWRITE
			// elements: statement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 131:19: -> ^( BLOCK ( statement )* )
			{
				DebugLocation(131, 22);
				// mccarthy.g3:131:22: ^( BLOCK ( statement )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(131, 24);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BLOCK, "BLOCK"), root_1);

				DebugLocation(131, 30);
				// mccarthy.g3:131:30: ( statement )*
				while ( stream_statement.HasNext )
				{
					DebugLocation(131, 30);
					adaptor.AddChild(root_1, stream_statement.NextTree());

				}
				stream_statement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statements", 9);
			LeaveRule("statements", 9);
			LeaveRule_statements();
		}
		DebugLocation(132, 1);
		} finally { DebugExitRule(GrammarFileName, "statements"); }
		return retval;

	}
	// $ANTLR end "statements"

	public sealed partial class statement_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public statement_return(mccarthyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(mccarthyParser grammar);
	}

	partial void EnterRule_statement();
	partial void LeaveRule_statement();

	// $ANTLR start "statement"
	// mccarthy.g3:134:8: public statement : ( assignment | replaceOperation | appendOperation | prependOperation | matchOperation | moveOperation | moveFrontOperation | moveBackOperation | deleteOperation );
	[GrammarRule("statement")]
	public mccarthyParser.statement_return statement()
	{
		EnterRule_statement();
		EnterRule("statement", 10);
		TraceIn("statement", 10);
		mccarthyParser.statement_return retval = new mccarthyParser.statement_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		mccarthyParser.assignment_return assignment20 = default(mccarthyParser.assignment_return);
		mccarthyParser.replaceOperation_return replaceOperation21 = default(mccarthyParser.replaceOperation_return);
		mccarthyParser.appendOperation_return appendOperation22 = default(mccarthyParser.appendOperation_return);
		mccarthyParser.prependOperation_return prependOperation23 = default(mccarthyParser.prependOperation_return);
		mccarthyParser.matchOperation_return matchOperation24 = default(mccarthyParser.matchOperation_return);
		mccarthyParser.moveOperation_return moveOperation25 = default(mccarthyParser.moveOperation_return);
		mccarthyParser.moveFrontOperation_return moveFrontOperation26 = default(mccarthyParser.moveFrontOperation_return);
		mccarthyParser.moveBackOperation_return moveBackOperation27 = default(mccarthyParser.moveBackOperation_return);
		mccarthyParser.deleteOperation_return deleteOperation28 = default(mccarthyParser.deleteOperation_return);


		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(134, 1);
		try
		{
			// mccarthy.g3:135:2: ( assignment | replaceOperation | appendOperation | prependOperation | matchOperation | moveOperation | moveFrontOperation | moveBackOperation | deleteOperation )
			int alt5=9;
			try { DebugEnterDecision(5, false);
			try
			{
				alt5 = dfa5.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// mccarthy.g3:135:4: assignment
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(135, 4);
				PushFollow(Follow._assignment_in_statement876);
				assignment20=assignment();
				PopFollow();

				adaptor.AddChild(root_0, assignment20.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// mccarthy.g3:136:4: replaceOperation
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(136, 4);
				PushFollow(Follow._replaceOperation_in_statement881);
				replaceOperation21=replaceOperation();
				PopFollow();

				adaptor.AddChild(root_0, replaceOperation21.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// mccarthy.g3:137:4: appendOperation
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(137, 4);
				PushFollow(Follow._appendOperation_in_statement886);
				appendOperation22=appendOperation();
				PopFollow();

				adaptor.AddChild(root_0, appendOperation22.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// mccarthy.g3:138:4: prependOperation
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(138, 4);
				PushFollow(Follow._prependOperation_in_statement891);
				prependOperation23=prependOperation();
				PopFollow();

				adaptor.AddChild(root_0, prependOperation23.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// mccarthy.g3:139:4: matchOperation
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(139, 4);
				PushFollow(Follow._matchOperation_in_statement896);
				matchOperation24=matchOperation();
				PopFollow();

				adaptor.AddChild(root_0, matchOperation24.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// mccarthy.g3:140:4: moveOperation
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(140, 4);
				PushFollow(Follow._moveOperation_in_statement901);
				moveOperation25=moveOperation();
				PopFollow();

				adaptor.AddChild(root_0, moveOperation25.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// mccarthy.g3:141:4: moveFrontOperation
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(141, 4);
				PushFollow(Follow._moveFrontOperation_in_statement906);
				moveFrontOperation26=moveFrontOperation();
				PopFollow();

				adaptor.AddChild(root_0, moveFrontOperation26.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// mccarthy.g3:142:4: moveBackOperation
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(142, 4);
				PushFollow(Follow._moveBackOperation_in_statement911);
				moveBackOperation27=moveBackOperation();
				PopFollow();

				adaptor.AddChild(root_0, moveBackOperation27.Tree);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// mccarthy.g3:143:4: deleteOperation
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(143, 4);
				PushFollow(Follow._deleteOperation_in_statement916);
				deleteOperation28=deleteOperation();
				PopFollow();

				adaptor.AddChild(root_0, deleteOperation28.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement", 10);
			LeaveRule("statement", 10);
			LeaveRule_statement();
		}
		DebugLocation(144, 1);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return retval;

	}
	// $ANTLR end "statement"

	private sealed partial class value_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public value_return(mccarthyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(mccarthyParser grammar);
	}

	partial void EnterRule_value();
	partial void LeaveRule_value();

	// $ANTLR start "value"
	// mccarthy.g3:145:1: value : (x= INT -> ^( VALINT $x) |x= ID -> ^( VARREF $x) |x= STRING -> ^( VALSTR $x) );
	[GrammarRule("value")]
	private mccarthyParser.value_return value()
	{
		EnterRule_value();
		EnterRule("value", 11);
		TraceIn("value", 11);
		mccarthyParser.value_return retval = new mccarthyParser.value_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken x = default(CommonToken);

		CommonTree x_tree = default(CommonTree);
		RewriteRuleITokenStream stream_INT=new RewriteRuleITokenStream(adaptor,"token INT");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");

		try { DebugEnterRule(GrammarFileName, "value");
		DebugLocation(145, 1);
		try
		{
			// mccarthy.g3:146:2: (x= INT -> ^( VALINT $x) |x= ID -> ^( VARREF $x) |x= STRING -> ^( VALSTR $x) )
			int alt6=3;
			try { DebugEnterDecision(6, false);
			switch (input.LA(1))
			{
			case INT:
				{
				alt6 = 1;
				}
				break;
			case ID:
				{
				alt6 = 2;
				}
				break;
			case STRING:
				{
				alt6 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 6, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// mccarthy.g3:147:4: x= INT
				{
				DebugLocation(147, 5);
				x=(CommonToken)Match(input,INT,Follow._INT_in_value931);  
				stream_INT.Add(x);



				{
				// AST REWRITE
				// elements: x
				// token labels: x
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleITokenStream stream_x=new RewriteRuleITokenStream(adaptor,"token x",x);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 147:10: -> ^( VALINT $x)
				{
					DebugLocation(147, 13);
					// mccarthy.g3:147:13: ^( VALINT $x)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(147, 15);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VALINT, "VALINT"), root_1);

					DebugLocation(147, 23);
					adaptor.AddChild(root_1, stream_x.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// mccarthy.g3:148:4: x= ID
				{
				DebugLocation(148, 5);
				x=(CommonToken)Match(input,ID,Follow._ID_in_value947);  
				stream_ID.Add(x);



				{
				// AST REWRITE
				// elements: x
				// token labels: x
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleITokenStream stream_x=new RewriteRuleITokenStream(adaptor,"token x",x);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 148:9: -> ^( VARREF $x)
				{
					DebugLocation(148, 12);
					// mccarthy.g3:148:12: ^( VARREF $x)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(148, 14);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VARREF, "VARREF"), root_1);

					DebugLocation(148, 22);
					adaptor.AddChild(root_1, stream_x.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// mccarthy.g3:149:4: x= STRING
				{
				DebugLocation(149, 5);
				x=(CommonToken)Match(input,STRING,Follow._STRING_in_value963);  
				stream_STRING.Add(x);



				{
				// AST REWRITE
				// elements: x
				// token labels: x
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleITokenStream stream_x=new RewriteRuleITokenStream(adaptor,"token x",x);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 149:13: -> ^( VALSTR $x)
				{
					DebugLocation(149, 16);
					// mccarthy.g3:149:16: ^( VALSTR $x)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(149, 18);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VALSTR, "VALSTR"), root_1);

					DebugLocation(149, 26);
					adaptor.AddChild(root_1, stream_x.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("value", 11);
			LeaveRule("value", 11);
			LeaveRule_value();
		}
		DebugLocation(150, 1);
		} finally { DebugExitRule(GrammarFileName, "value"); }
		return retval;

	}
	// $ANTLR end "value"

	private sealed partial class assignment_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public assignment_return(mccarthyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(mccarthyParser grammar);
	}

	partial void EnterRule_assignment();
	partial void LeaveRule_assignment();

	// $ANTLR start "assignment"
	// mccarthy.g3:152:1: assignment : id= ID '=' value ;
	[GrammarRule("assignment")]
	private mccarthyParser.assignment_return assignment()
	{
		EnterRule_assignment();
		EnterRule("assignment", 12);
		TraceIn("assignment", 12);
		mccarthyParser.assignment_return retval = new mccarthyParser.assignment_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken id = default(CommonToken);
		CommonToken char_literal29 = default(CommonToken);
		mccarthyParser.value_return value30 = default(mccarthyParser.value_return);

		CommonTree id_tree = default(CommonTree);
		CommonTree char_literal29_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "assignment");
		DebugLocation(152, 1);
		try
		{
			// mccarthy.g3:153:2: (id= ID '=' value )
			DebugEnterAlt(1);
			// mccarthy.g3:154:2: id= ID '=' value
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(154, 4);
			id=(CommonToken)Match(input,ID,Follow._ID_in_assignment986); 
			id_tree = (CommonTree)adaptor.Create(id);
			adaptor.AddChild(root_0, id_tree);

			DebugLocation(154, 8);
			char_literal29=(CommonToken)Match(input,54,Follow._54_in_assignment988); 
			char_literal29_tree = (CommonTree)adaptor.Create(char_literal29);
			adaptor.AddChild(root_0, char_literal29_tree);

			DebugLocation(154, 12);
			PushFollow(Follow._value_in_assignment990);
			value30=value();
			PopFollow();

			adaptor.AddChild(root_0, value30.Tree);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignment", 12);
			LeaveRule("assignment", 12);
			LeaveRule_assignment();
		}
		DebugLocation(155, 1);
		} finally { DebugExitRule(GrammarFileName, "assignment"); }
		return retval;

	}
	// $ANTLR end "assignment"

	private sealed partial class replaceOperation_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public replaceOperation_return(mccarthyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(mccarthyParser grammar);
	}

	partial void EnterRule_replaceOperation();
	partial void LeaveRule_replaceOperation();

	// $ANTLR start "replaceOperation"
	// mccarthy.g3:156:1: replaceOperation : pe= pathExpression '==' val= value -> ^( REPLACE $pe $val) ;
	[GrammarRule("replaceOperation")]
	private mccarthyParser.replaceOperation_return replaceOperation()
	{
		EnterRule_replaceOperation();
		EnterRule("replaceOperation", 13);
		TraceIn("replaceOperation", 13);
		mccarthyParser.replaceOperation_return retval = new mccarthyParser.replaceOperation_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal31 = default(CommonToken);
		mccarthyParser.pathExpression_return pe = default(mccarthyParser.pathExpression_return);
		mccarthyParser.value_return val = default(mccarthyParser.value_return);

		CommonTree string_literal31_tree = default(CommonTree);
		RewriteRuleITokenStream stream_56=new RewriteRuleITokenStream(adaptor,"token 56");
		RewriteRuleSubtreeStream stream_pathExpression=new RewriteRuleSubtreeStream(adaptor,"rule pathExpression");
		RewriteRuleSubtreeStream stream_value=new RewriteRuleSubtreeStream(adaptor,"rule value");
		try { DebugEnterRule(GrammarFileName, "replaceOperation");
		DebugLocation(156, 1);
		try
		{
			// mccarthy.g3:157:2: (pe= pathExpression '==' val= value -> ^( REPLACE $pe $val) )
			DebugEnterAlt(1);
			// mccarthy.g3:158:2: pe= pathExpression '==' val= value
			{
			DebugLocation(158, 4);
			PushFollow(Follow._pathExpression_in_replaceOperation1004);
			pe=pathExpression();
			PopFollow();

			stream_pathExpression.Add(pe.Tree);
			DebugLocation(158, 20);
			string_literal31=(CommonToken)Match(input,56,Follow._56_in_replaceOperation1006);  
			stream_56.Add(string_literal31);

			DebugLocation(158, 28);
			PushFollow(Follow._value_in_replaceOperation1010);
			val=value();
			PopFollow();

			stream_value.Add(val.Tree);


			{
			// AST REWRITE
			// elements: pe, val
			// token labels: 
			// rule labels: pe, val, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_pe=new RewriteRuleSubtreeStream(adaptor,"rule pe",pe!=null?pe.Tree:null);
			RewriteRuleSubtreeStream stream_val=new RewriteRuleSubtreeStream(adaptor,"rule val",val!=null?val.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 159:3: -> ^( REPLACE $pe $val)
			{
				DebugLocation(159, 6);
				// mccarthy.g3:159:6: ^( REPLACE $pe $val)
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(159, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(REPLACE, "REPLACE"), root_1);

				DebugLocation(159, 17);
				adaptor.AddChild(root_1, stream_pe.NextTree());
				DebugLocation(159, 21);
				adaptor.AddChild(root_1, stream_val.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("replaceOperation", 13);
			LeaveRule("replaceOperation", 13);
			LeaveRule_replaceOperation();
		}
		DebugLocation(160, 1);
		} finally { DebugExitRule(GrammarFileName, "replaceOperation"); }
		return retval;

	}
	// $ANTLR end "replaceOperation"

	private sealed partial class pathExpression_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public pathExpression_return(mccarthyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(mccarthyParser grammar);
	}

	partial void EnterRule_pathExpression();
	partial void LeaveRule_pathExpression();

	// $ANTLR start "pathExpression"
	// mccarthy.g3:161:1: pathExpression : '$' ctx= ID segs= xpathSegments -> ^( PATH ^( PATHCTX $ctx) $segs) ;
	[GrammarRule("pathExpression")]
	private mccarthyParser.pathExpression_return pathExpression()
	{
		EnterRule_pathExpression();
		EnterRule("pathExpression", 14);
		TraceIn("pathExpression", 14);
		mccarthyParser.pathExpression_return retval = new mccarthyParser.pathExpression_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken ctx = default(CommonToken);
		CommonToken char_literal32 = default(CommonToken);
		mccarthyParser.xpathSegments_return segs = default(mccarthyParser.xpathSegments_return);

		CommonTree ctx_tree = default(CommonTree);
		CommonTree char_literal32_tree = default(CommonTree);
		RewriteRuleITokenStream stream_43=new RewriteRuleITokenStream(adaptor,"token 43");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_xpathSegments=new RewriteRuleSubtreeStream(adaptor,"rule xpathSegments");
		try { DebugEnterRule(GrammarFileName, "pathExpression");
		DebugLocation(161, 1);
		try
		{
			// mccarthy.g3:162:2: ( '$' ctx= ID segs= xpathSegments -> ^( PATH ^( PATHCTX $ctx) $segs) )
			DebugEnterAlt(1);
			// mccarthy.g3:163:2: '$' ctx= ID segs= xpathSegments
			{
			DebugLocation(163, 2);
			char_literal32=(CommonToken)Match(input,43,Follow._43_in_pathExpression1035);  
			stream_43.Add(char_literal32);

			DebugLocation(163, 9);
			ctx=(CommonToken)Match(input,ID,Follow._ID_in_pathExpression1039);  
			stream_ID.Add(ctx);

			DebugLocation(163, 17);
			PushFollow(Follow._xpathSegments_in_pathExpression1043);
			segs=xpathSegments();
			PopFollow();

			stream_xpathSegments.Add(segs.Tree);


			{
			// AST REWRITE
			// elements: ctx, segs
			// token labels: ctx
			// rule labels: segs, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleITokenStream stream_ctx=new RewriteRuleITokenStream(adaptor,"token ctx",ctx);
			RewriteRuleSubtreeStream stream_segs=new RewriteRuleSubtreeStream(adaptor,"rule segs",segs!=null?segs.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 164:3: -> ^( PATH ^( PATHCTX $ctx) $segs)
			{
				DebugLocation(164, 6);
				// mccarthy.g3:164:6: ^( PATH ^( PATHCTX $ctx) $segs)
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(164, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PATH, "PATH"), root_1);

				DebugLocation(164, 13);
				// mccarthy.g3:164:13: ^( PATHCTX $ctx)
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(164, 15);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PATHCTX, "PATHCTX"), root_2);

				DebugLocation(164, 24);
				adaptor.AddChild(root_2, stream_ctx.NextNode());

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(164, 30);
				adaptor.AddChild(root_1, stream_segs.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("pathExpression", 14);
			LeaveRule("pathExpression", 14);
			LeaveRule_pathExpression();
		}
		DebugLocation(165, 1);
		} finally { DebugExitRule(GrammarFileName, "pathExpression"); }
		return retval;

	}
	// $ANTLR end "pathExpression"

	private sealed partial class xpathSegments_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public xpathSegments_return(mccarthyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(mccarthyParser grammar);
	}

	partial void EnterRule_xpathSegments();
	partial void LeaveRule_xpathSegments();

	// $ANTLR start "xpathSegments"
	// mccarthy.g3:166:1: xpathSegments : ( '/' ID )* -> ( ^( SEG ID ) )* ;
	[GrammarRule("xpathSegments")]
	private mccarthyParser.xpathSegments_return xpathSegments()
	{
		EnterRule_xpathSegments();
		EnterRule("xpathSegments", 15);
		TraceIn("xpathSegments", 15);
		mccarthyParser.xpathSegments_return retval = new mccarthyParser.xpathSegments_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal33 = default(CommonToken);
		CommonToken ID34 = default(CommonToken);

		CommonTree char_literal33_tree = default(CommonTree);
		CommonTree ID34_tree = default(CommonTree);
		RewriteRuleITokenStream stream_48=new RewriteRuleITokenStream(adaptor,"token 48");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");

		try { DebugEnterRule(GrammarFileName, "xpathSegments");
		DebugLocation(166, 1);
		try
		{
			// mccarthy.g3:167:2: ( ( '/' ID )* -> ( ^( SEG ID ) )* )
			DebugEnterAlt(1);
			// mccarthy.g3:167:4: ( '/' ID )*
			{
			DebugLocation(167, 4);
			// mccarthy.g3:167:4: ( '/' ID )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==48))
				{
					alt7 = 1;
				}


				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// mccarthy.g3:167:5: '/' ID
					{
					DebugLocation(167, 5);
					char_literal33=(CommonToken)Match(input,48,Follow._48_in_xpathSegments1072);  
					stream_48.Add(char_literal33);

					DebugLocation(167, 9);
					ID34=(CommonToken)Match(input,ID,Follow._ID_in_xpathSegments1074);  
					stream_ID.Add(ID34);


					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }



			{
			// AST REWRITE
			// elements: ID
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 167:14: -> ( ^( SEG ID ) )*
			{
				DebugLocation(167, 17);
				// mccarthy.g3:167:17: ( ^( SEG ID ) )*
				while ( stream_ID.HasNext )
				{
					DebugLocation(167, 17);
					// mccarthy.g3:167:17: ^( SEG ID )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(167, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SEG, "SEG"), root_1);

					DebugLocation(167, 23);
					adaptor.AddChild(root_1, stream_ID.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}
				stream_ID.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("xpathSegments", 15);
			LeaveRule("xpathSegments", 15);
			LeaveRule_xpathSegments();
		}
		DebugLocation(168, 1);
		} finally { DebugExitRule(GrammarFileName, "xpathSegments"); }
		return retval;

	}
	// $ANTLR end "xpathSegments"

	private sealed partial class appendOperation_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public appendOperation_return(mccarthyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(mccarthyParser grammar);
	}

	partial void EnterRule_appendOperation();
	partial void LeaveRule_appendOperation();

	// $ANTLR start "appendOperation"
	// mccarthy.g3:169:1: appendOperation : pe= pathExpression '=>' val= value -> ^( APPEND $pe $val) ;
	[GrammarRule("appendOperation")]
	private mccarthyParser.appendOperation_return appendOperation()
	{
		EnterRule_appendOperation();
		EnterRule("appendOperation", 16);
		TraceIn("appendOperation", 16);
		mccarthyParser.appendOperation_return retval = new mccarthyParser.appendOperation_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal35 = default(CommonToken);
		mccarthyParser.pathExpression_return pe = default(mccarthyParser.pathExpression_return);
		mccarthyParser.value_return val = default(mccarthyParser.value_return);

		CommonTree string_literal35_tree = default(CommonTree);
		RewriteRuleITokenStream stream_57=new RewriteRuleITokenStream(adaptor,"token 57");
		RewriteRuleSubtreeStream stream_pathExpression=new RewriteRuleSubtreeStream(adaptor,"rule pathExpression");
		RewriteRuleSubtreeStream stream_value=new RewriteRuleSubtreeStream(adaptor,"rule value");
		try { DebugEnterRule(GrammarFileName, "appendOperation");
		DebugLocation(169, 1);
		try
		{
			// mccarthy.g3:170:2: (pe= pathExpression '=>' val= value -> ^( APPEND $pe $val) )
			DebugEnterAlt(1);
			// mccarthy.g3:171:2: pe= pathExpression '=>' val= value
			{
			DebugLocation(171, 4);
			PushFollow(Follow._pathExpression_in_appendOperation1098);
			pe=pathExpression();
			PopFollow();

			stream_pathExpression.Add(pe.Tree);
			DebugLocation(171, 20);
			string_literal35=(CommonToken)Match(input,57,Follow._57_in_appendOperation1100);  
			stream_57.Add(string_literal35);

			DebugLocation(171, 28);
			PushFollow(Follow._value_in_appendOperation1104);
			val=value();
			PopFollow();

			stream_value.Add(val.Tree);


			{
			// AST REWRITE
			// elements: pe, val
			// token labels: 
			// rule labels: pe, val, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_pe=new RewriteRuleSubtreeStream(adaptor,"rule pe",pe!=null?pe.Tree:null);
			RewriteRuleSubtreeStream stream_val=new RewriteRuleSubtreeStream(adaptor,"rule val",val!=null?val.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 172:3: -> ^( APPEND $pe $val)
			{
				DebugLocation(172, 6);
				// mccarthy.g3:172:6: ^( APPEND $pe $val)
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(172, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(APPEND, "APPEND"), root_1);

				DebugLocation(172, 16);
				adaptor.AddChild(root_1, stream_pe.NextTree());
				DebugLocation(172, 20);
				adaptor.AddChild(root_1, stream_val.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("appendOperation", 16);
			LeaveRule("appendOperation", 16);
			LeaveRule_appendOperation();
		}
		DebugLocation(173, 1);
		} finally { DebugExitRule(GrammarFileName, "appendOperation"); }
		return retval;

	}
	// $ANTLR end "appendOperation"

	private sealed partial class prependOperation_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public prependOperation_return(mccarthyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(mccarthyParser grammar);
	}

	partial void EnterRule_prependOperation();
	partial void LeaveRule_prependOperation();

	// $ANTLR start "prependOperation"
	// mccarthy.g3:174:1: prependOperation : pe= pathExpression '=<' val= value -> ^( PREPEND $pe $val) ;
	[GrammarRule("prependOperation")]
	private mccarthyParser.prependOperation_return prependOperation()
	{
		EnterRule_prependOperation();
		EnterRule("prependOperation", 17);
		TraceIn("prependOperation", 17);
		mccarthyParser.prependOperation_return retval = new mccarthyParser.prependOperation_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal36 = default(CommonToken);
		mccarthyParser.pathExpression_return pe = default(mccarthyParser.pathExpression_return);
		mccarthyParser.value_return val = default(mccarthyParser.value_return);

		CommonTree string_literal36_tree = default(CommonTree);
		RewriteRuleITokenStream stream_55=new RewriteRuleITokenStream(adaptor,"token 55");
		RewriteRuleSubtreeStream stream_pathExpression=new RewriteRuleSubtreeStream(adaptor,"rule pathExpression");
		RewriteRuleSubtreeStream stream_value=new RewriteRuleSubtreeStream(adaptor,"rule value");
		try { DebugEnterRule(GrammarFileName, "prependOperation");
		DebugLocation(174, 1);
		try
		{
			// mccarthy.g3:175:2: (pe= pathExpression '=<' val= value -> ^( PREPEND $pe $val) )
			DebugEnterAlt(1);
			// mccarthy.g3:176:2: pe= pathExpression '=<' val= value
			{
			DebugLocation(176, 4);
			PushFollow(Follow._pathExpression_in_prependOperation1131);
			pe=pathExpression();
			PopFollow();

			stream_pathExpression.Add(pe.Tree);
			DebugLocation(176, 20);
			string_literal36=(CommonToken)Match(input,55,Follow._55_in_prependOperation1133);  
			stream_55.Add(string_literal36);

			DebugLocation(176, 28);
			PushFollow(Follow._value_in_prependOperation1137);
			val=value();
			PopFollow();

			stream_value.Add(val.Tree);


			{
			// AST REWRITE
			// elements: pe, val
			// token labels: 
			// rule labels: pe, val, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_pe=new RewriteRuleSubtreeStream(adaptor,"rule pe",pe!=null?pe.Tree:null);
			RewriteRuleSubtreeStream stream_val=new RewriteRuleSubtreeStream(adaptor,"rule val",val!=null?val.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 177:3: -> ^( PREPEND $pe $val)
			{
				DebugLocation(177, 6);
				// mccarthy.g3:177:6: ^( PREPEND $pe $val)
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(177, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PREPEND, "PREPEND"), root_1);

				DebugLocation(177, 17);
				adaptor.AddChild(root_1, stream_pe.NextTree());
				DebugLocation(177, 21);
				adaptor.AddChild(root_1, stream_val.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prependOperation", 17);
			LeaveRule("prependOperation", 17);
			LeaveRule_prependOperation();
		}
		DebugLocation(178, 1);
		} finally { DebugExitRule(GrammarFileName, "prependOperation"); }
		return retval;

	}
	// $ANTLR end "prependOperation"

	public sealed partial class matchOperation_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public matchOperation_return(mccarthyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(mccarthyParser grammar);
	}

	partial void EnterRule_matchOperation();
	partial void LeaveRule_matchOperation();

	// $ANTLR start "matchOperation"
	// mccarthy.g3:179:8: public matchOperation : ( ID MATCHOP content -> ^( MATCH ^( VARREF ID ) content ) | pathExpression MATCHOP content -> ^( MATCH pathExpression content ) );
	[GrammarRule("matchOperation")]
	public mccarthyParser.matchOperation_return matchOperation()
	{
		EnterRule_matchOperation();
		EnterRule("matchOperation", 18);
		TraceIn("matchOperation", 18);
		mccarthyParser.matchOperation_return retval = new mccarthyParser.matchOperation_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken ID37 = default(CommonToken);
		CommonToken MATCHOP38 = default(CommonToken);
		CommonToken MATCHOP41 = default(CommonToken);
		mccarthyParser.content_return content39 = default(mccarthyParser.content_return);
		mccarthyParser.pathExpression_return pathExpression40 = default(mccarthyParser.pathExpression_return);
		mccarthyParser.content_return content42 = default(mccarthyParser.content_return);

		CommonTree ID37_tree = default(CommonTree);
		CommonTree MATCHOP38_tree = default(CommonTree);
		CommonTree MATCHOP41_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_MATCHOP=new RewriteRuleITokenStream(adaptor,"token MATCHOP");
		RewriteRuleSubtreeStream stream_content=new RewriteRuleSubtreeStream(adaptor,"rule content");
		RewriteRuleSubtreeStream stream_pathExpression=new RewriteRuleSubtreeStream(adaptor,"rule pathExpression");
		expectingXml = true;
		try { DebugEnterRule(GrammarFileName, "matchOperation");
		DebugLocation(179, 1);
		try
		{
			// mccarthy.g3:182:2: ( ID MATCHOP content -> ^( MATCH ^( VARREF ID ) content ) | pathExpression MATCHOP content -> ^( MATCH pathExpression content ) )
			int alt8=2;
			try { DebugEnterDecision(8, false);
			int LA8_0 = input.LA(1);

			if ((LA8_0==ID))
			{
				alt8 = 1;
			}
			else if ((LA8_0==43))
			{
				alt8 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 8, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// mccarthy.g3:183:9: ID MATCHOP content
				{
				DebugLocation(183, 9);
				ID37=(CommonToken)Match(input,ID,Follow._ID_in_matchOperation1181);  
				stream_ID.Add(ID37);

				DebugLocation(183, 12);
				MATCHOP38=(CommonToken)Match(input,MATCHOP,Follow._MATCHOP_in_matchOperation1183);  
				stream_MATCHOP.Add(MATCHOP38);

				DebugLocation(183, 20);
				PushFollow(Follow._content_in_matchOperation1185);
				content39=content();
				PopFollow();

				stream_content.Add(content39.Tree);


				{
				// AST REWRITE
				// elements: ID, content
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 183:28: -> ^( MATCH ^( VARREF ID ) content )
				{
					DebugLocation(183, 31);
					// mccarthy.g3:183:31: ^( MATCH ^( VARREF ID ) content )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(183, 33);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(MATCH, "MATCH"), root_1);

					DebugLocation(183, 39);
					// mccarthy.g3:183:39: ^( VARREF ID )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(183, 41);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VARREF, "VARREF"), root_2);

					DebugLocation(183, 48);
					adaptor.AddChild(root_2, stream_ID.NextNode());

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(183, 52);
					adaptor.AddChild(root_1, stream_content.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// mccarthy.g3:184:3: pathExpression MATCHOP content
				{
				DebugLocation(184, 3);
				PushFollow(Follow._pathExpression_in_matchOperation1203);
				pathExpression40=pathExpression();
				PopFollow();

				stream_pathExpression.Add(pathExpression40.Tree);
				DebugLocation(184, 18);
				MATCHOP41=(CommonToken)Match(input,MATCHOP,Follow._MATCHOP_in_matchOperation1205);  
				stream_MATCHOP.Add(MATCHOP41);

				DebugLocation(184, 26);
				PushFollow(Follow._content_in_matchOperation1207);
				content42=content();
				PopFollow();

				stream_content.Add(content42.Tree);


				{
				// AST REWRITE
				// elements: pathExpression, content
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 184:34: -> ^( MATCH pathExpression content )
				{
					DebugLocation(184, 37);
					// mccarthy.g3:184:37: ^( MATCH pathExpression content )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(184, 39);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(MATCH, "MATCH"), root_1);

					DebugLocation(184, 45);
					adaptor.AddChild(root_1, stream_pathExpression.NextTree());
					DebugLocation(184, 60);
					adaptor.AddChild(root_1, stream_content.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

			expectingXml = false;
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("matchOperation", 18);
			LeaveRule("matchOperation", 18);
			LeaveRule_matchOperation();
		}
		DebugLocation(185, 1);
		} finally { DebugExitRule(GrammarFileName, "matchOperation"); }
		return retval;

	}
	// $ANTLR end "matchOperation"

	private sealed partial class moveOperation_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public moveOperation_return(mccarthyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(mccarthyParser grammar);
	}

	partial void EnterRule_moveOperation();
	partial void LeaveRule_moveOperation();

	// $ANTLR start "moveOperation"
	// mccarthy.g3:186:1: moveOperation : var= ID '->' val= ID ;
	[GrammarRule("moveOperation")]
	private mccarthyParser.moveOperation_return moveOperation()
	{
		EnterRule_moveOperation();
		EnterRule("moveOperation", 19);
		TraceIn("moveOperation", 19);
		mccarthyParser.moveOperation_return retval = new mccarthyParser.moveOperation_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken var = default(CommonToken);
		CommonToken val = default(CommonToken);
		CommonToken string_literal43 = default(CommonToken);

		CommonTree var_tree = default(CommonTree);
		CommonTree val_tree = default(CommonTree);
		CommonTree string_literal43_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "moveOperation");
		DebugLocation(186, 1);
		try
		{
			// mccarthy.g3:187:2: (var= ID '->' val= ID )
			DebugEnterAlt(1);
			// mccarthy.g3:188:2: var= ID '->' val= ID
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(188, 5);
			var=(CommonToken)Match(input,ID,Follow._ID_in_moveOperation1230); 
			var_tree = (CommonTree)adaptor.Create(var);
			adaptor.AddChild(root_0, var_tree);

			DebugLocation(188, 13);
			string_literal43=(CommonToken)Match(input,47,Follow._47_in_moveOperation1232); 
			string_literal43_tree = (CommonTree)adaptor.Create(string_literal43);
			root_0 = (CommonTree)adaptor.BecomeRoot(string_literal43_tree, root_0);

			DebugLocation(188, 18);
			val=(CommonToken)Match(input,ID,Follow._ID_in_moveOperation1237); 
			val_tree = (CommonTree)adaptor.Create(val);
			adaptor.AddChild(root_0, val_tree);


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("moveOperation", 19);
			LeaveRule("moveOperation", 19);
			LeaveRule_moveOperation();
		}
		DebugLocation(189, 1);
		} finally { DebugExitRule(GrammarFileName, "moveOperation"); }
		return retval;

	}
	// $ANTLR end "moveOperation"

	private sealed partial class moveFrontOperation_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public moveFrontOperation_return(mccarthyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(mccarthyParser grammar);
	}

	partial void EnterRule_moveFrontOperation();
	partial void LeaveRule_moveFrontOperation();

	// $ANTLR start "moveFrontOperation"
	// mccarthy.g3:191:1: moveFrontOperation : var= ID '=><' val= ID ;
	[GrammarRule("moveFrontOperation")]
	private mccarthyParser.moveFrontOperation_return moveFrontOperation()
	{
		EnterRule_moveFrontOperation();
		EnterRule("moveFrontOperation", 20);
		TraceIn("moveFrontOperation", 20);
		mccarthyParser.moveFrontOperation_return retval = new mccarthyParser.moveFrontOperation_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken var = default(CommonToken);
		CommonToken val = default(CommonToken);
		CommonToken string_literal44 = default(CommonToken);

		CommonTree var_tree = default(CommonTree);
		CommonTree val_tree = default(CommonTree);
		CommonTree string_literal44_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "moveFrontOperation");
		DebugLocation(191, 1);
		try
		{
			// mccarthy.g3:192:2: (var= ID '=><' val= ID )
			DebugEnterAlt(1);
			// mccarthy.g3:193:2: var= ID '=><' val= ID
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(193, 5);
			var=(CommonToken)Match(input,ID,Follow._ID_in_moveFrontOperation1251); 
			var_tree = (CommonTree)adaptor.Create(var);
			adaptor.AddChild(root_0, var_tree);

			DebugLocation(193, 14);
			string_literal44=(CommonToken)Match(input,58,Follow._58_in_moveFrontOperation1253); 
			string_literal44_tree = (CommonTree)adaptor.Create(string_literal44);
			root_0 = (CommonTree)adaptor.BecomeRoot(string_literal44_tree, root_0);

			DebugLocation(193, 19);
			val=(CommonToken)Match(input,ID,Follow._ID_in_moveFrontOperation1258); 
			val_tree = (CommonTree)adaptor.Create(val);
			adaptor.AddChild(root_0, val_tree);


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("moveFrontOperation", 20);
			LeaveRule("moveFrontOperation", 20);
			LeaveRule_moveFrontOperation();
		}
		DebugLocation(194, 1);
		} finally { DebugExitRule(GrammarFileName, "moveFrontOperation"); }
		return retval;

	}
	// $ANTLR end "moveFrontOperation"

	private sealed partial class moveBackOperation_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public moveBackOperation_return(mccarthyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(mccarthyParser grammar);
	}

	partial void EnterRule_moveBackOperation();
	partial void LeaveRule_moveBackOperation();

	// $ANTLR start "moveBackOperation"
	// mccarthy.g3:195:1: moveBackOperation : var= ID '=>>' val= ID ;
	[GrammarRule("moveBackOperation")]
	private mccarthyParser.moveBackOperation_return moveBackOperation()
	{
		EnterRule_moveBackOperation();
		EnterRule("moveBackOperation", 21);
		TraceIn("moveBackOperation", 21);
		mccarthyParser.moveBackOperation_return retval = new mccarthyParser.moveBackOperation_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken var = default(CommonToken);
		CommonToken val = default(CommonToken);
		CommonToken string_literal45 = default(CommonToken);

		CommonTree var_tree = default(CommonTree);
		CommonTree val_tree = default(CommonTree);
		CommonTree string_literal45_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "moveBackOperation");
		DebugLocation(195, 1);
		try
		{
			// mccarthy.g3:196:2: (var= ID '=>>' val= ID )
			DebugEnterAlt(1);
			// mccarthy.g3:197:2: var= ID '=>>' val= ID
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(197, 5);
			var=(CommonToken)Match(input,ID,Follow._ID_in_moveBackOperation1271); 
			var_tree = (CommonTree)adaptor.Create(var);
			adaptor.AddChild(root_0, var_tree);

			DebugLocation(197, 14);
			string_literal45=(CommonToken)Match(input,59,Follow._59_in_moveBackOperation1273); 
			string_literal45_tree = (CommonTree)adaptor.Create(string_literal45);
			root_0 = (CommonTree)adaptor.BecomeRoot(string_literal45_tree, root_0);

			DebugLocation(197, 19);
			val=(CommonToken)Match(input,ID,Follow._ID_in_moveBackOperation1278); 
			val_tree = (CommonTree)adaptor.Create(val);
			adaptor.AddChild(root_0, val_tree);


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("moveBackOperation", 21);
			LeaveRule("moveBackOperation", 21);
			LeaveRule_moveBackOperation();
		}
		DebugLocation(198, 1);
		} finally { DebugExitRule(GrammarFileName, "moveBackOperation"); }
		return retval;

	}
	// $ANTLR end "moveBackOperation"

	private sealed partial class deleteOperation_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public deleteOperation_return(mccarthyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(mccarthyParser grammar);
	}

	partial void EnterRule_deleteOperation();
	partial void LeaveRule_deleteOperation();

	// $ANTLR start "deleteOperation"
	// mccarthy.g3:199:1: deleteOperation : var= ID '!=' val= ID ;
	[GrammarRule("deleteOperation")]
	private mccarthyParser.deleteOperation_return deleteOperation()
	{
		EnterRule_deleteOperation();
		EnterRule("deleteOperation", 22);
		TraceIn("deleteOperation", 22);
		mccarthyParser.deleteOperation_return retval = new mccarthyParser.deleteOperation_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken var = default(CommonToken);
		CommonToken val = default(CommonToken);
		CommonToken string_literal46 = default(CommonToken);

		CommonTree var_tree = default(CommonTree);
		CommonTree val_tree = default(CommonTree);
		CommonTree string_literal46_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "deleteOperation");
		DebugLocation(199, 1);
		try
		{
			// mccarthy.g3:200:2: (var= ID '!=' val= ID )
			DebugEnterAlt(1);
			// mccarthy.g3:201:2: var= ID '!=' val= ID
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(201, 5);
			var=(CommonToken)Match(input,ID,Follow._ID_in_deleteOperation1291); 
			var_tree = (CommonTree)adaptor.Create(var);
			adaptor.AddChild(root_0, var_tree);

			DebugLocation(201, 13);
			string_literal46=(CommonToken)Match(input,42,Follow._42_in_deleteOperation1293); 
			string_literal46_tree = (CommonTree)adaptor.Create(string_literal46);
			root_0 = (CommonTree)adaptor.BecomeRoot(string_literal46_tree, root_0);

			DebugLocation(201, 18);
			val=(CommonToken)Match(input,ID,Follow._ID_in_deleteOperation1298); 
			val_tree = (CommonTree)adaptor.Create(val);
			adaptor.AddChild(root_0, val_tree);


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("deleteOperation", 22);
			LeaveRule("deleteOperation", 22);
			LeaveRule_deleteOperation();
		}
		DebugLocation(202, 1);
		} finally { DebugExitRule(GrammarFileName, "deleteOperation"); }
		return retval;

	}
	// $ANTLR end "deleteOperation"

	private sealed partial class pattern_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public pattern_return(mccarthyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(mccarthyParser grammar);
	}

	partial void EnterRule_pattern();
	partial void LeaveRule_pattern();

	// $ANTLR start "pattern"
	// mccarthy.g3:204:1: pattern : '?' ID ;
	[GrammarRule("pattern")]
	private mccarthyParser.pattern_return pattern()
	{
		EnterRule_pattern();
		EnterRule("pattern", 23);
		TraceIn("pattern", 23);
		mccarthyParser.pattern_return retval = new mccarthyParser.pattern_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal47 = default(CommonToken);
		CommonToken ID48 = default(CommonToken);

		CommonTree char_literal47_tree = default(CommonTree);
		CommonTree ID48_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "pattern");
		DebugLocation(204, 4);
		try
		{
			// mccarthy.g3:204:9: ( '?' ID )
			DebugEnterAlt(1);
			// mccarthy.g3:204:11: '?' ID
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(204, 11);
			char_literal47=(CommonToken)Match(input,61,Follow._61_in_pattern1308); 
			char_literal47_tree = (CommonTree)adaptor.Create(char_literal47);
			adaptor.AddChild(root_0, char_literal47_tree);

			DebugLocation(204, 15);
			ID48=(CommonToken)Match(input,ID,Follow._ID_in_pattern1310); 
			ID48_tree = (CommonTree)adaptor.Create(ID48);
			adaptor.AddChild(root_0, ID48_tree);


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("pattern", 23);
			LeaveRule("pattern", 23);
			LeaveRule_pattern();
		}
		DebugLocation(205, 4);
		} finally { DebugExitRule(GrammarFileName, "pattern"); }
		return retval;

	}
	// $ANTLR end "pattern"

	private sealed partial class valueOf_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public valueOf_return(mccarthyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(mccarthyParser grammar);
	}

	partial void EnterRule_valueOf();
	partial void LeaveRule_valueOf();

	// $ANTLR start "valueOf"
	// mccarthy.g3:207:1: valueOf : '!' ID ;
	[GrammarRule("valueOf")]
	private mccarthyParser.valueOf_return valueOf()
	{
		EnterRule_valueOf();
		EnterRule("valueOf", 24);
		TraceIn("valueOf", 24);
		mccarthyParser.valueOf_return retval = new mccarthyParser.valueOf_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal49 = default(CommonToken);
		CommonToken ID50 = default(CommonToken);

		CommonTree char_literal49_tree = default(CommonTree);
		CommonTree ID50_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "valueOf");
		DebugLocation(207, 4);
		try
		{
			// mccarthy.g3:208:2: ( '!' ID )
			DebugEnterAlt(1);
			// mccarthy.g3:208:4: '!' ID
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(208, 4);
			char_literal49=(CommonToken)Match(input,41,Follow._41_in_valueOf1325); 
			char_literal49_tree = (CommonTree)adaptor.Create(char_literal49);
			adaptor.AddChild(root_0, char_literal49_tree);

			DebugLocation(208, 8);
			ID50=(CommonToken)Match(input,ID,Follow._ID_in_valueOf1327); 
			ID50_tree = (CommonTree)adaptor.Create(ID50);
			adaptor.AddChild(root_0, ID50_tree);


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("valueOf", 24);
			LeaveRule("valueOf", 24);
			LeaveRule_valueOf();
		}
		DebugLocation(209, 4);
		} finally { DebugExitRule(GrammarFileName, "valueOf"); }
		return retval;

	}
	// $ANTLR end "valueOf"

	public sealed partial class content_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public content_return(mccarthyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(mccarthyParser grammar);
	}

	partial void EnterRule_content();
	partial void LeaveRule_content();

	// $ANTLR start "content"
	// mccarthy.g3:214:8: public content : ( element )* -> ^( XML ( element )* ) ;
	[GrammarRule("content")]
	public mccarthyParser.content_return content()
	{
		EnterRule_content();
		EnterRule("content", 25);
		TraceIn("content", 25);
		mccarthyParser.content_return retval = new mccarthyParser.content_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		mccarthyParser.element_return element51 = default(mccarthyParser.element_return);

		RewriteRuleSubtreeStream stream_element=new RewriteRuleSubtreeStream(adaptor,"rule element");
		try { DebugEnterRule(GrammarFileName, "content");
		DebugLocation(214, 51);
		try
		{
			// mccarthy.g3:214:20: ( ( element )* -> ^( XML ( element )* ) )
			DebugEnterAlt(1);
			// mccarthy.g3:214:23: ( element )*
			{
			DebugLocation(214, 23);
			// mccarthy.g3:214:23: ( element )*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if (((LA9_0>=52 && LA9_0<=53)))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// mccarthy.g3:214:24: element
					{
					DebugLocation(214, 24);
					PushFollow(Follow._element_in_content1356);
					element51=element();
					PopFollow();

					stream_element.Add(element51.Tree);

					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }



			{
			// AST REWRITE
			// elements: element
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 214:34: -> ^( XML ( element )* )
			{
				DebugLocation(214, 37);
				// mccarthy.g3:214:37: ^( XML ( element )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(214, 39);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(XML, "XML"), root_1);

				DebugLocation(214, 43);
				// mccarthy.g3:214:43: ( element )*
				while ( stream_element.HasNext )
				{
					DebugLocation(214, 43);
					adaptor.AddChild(root_1, stream_element.NextTree());

				}
				stream_element.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("content", 25);
			LeaveRule("content", 25);
			LeaveRule_content();
		}
		DebugLocation(214, 51);
		} finally { DebugExitRule(GrammarFileName, "content"); }
		return retval;

	}
	// $ANTLR end "content"

	public sealed partial class element_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public element_return(mccarthyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(mccarthyParser grammar);
	}

	partial void EnterRule_element();
	partial void LeaveRule_element();

	// $ANTLR start "element"
	// mccarthy.g3:215:8: public element : ( '<' ID ( attribute )* '>' -> ^( XMLOPENELEM ID ^( XMLATTRS ( attribute )* ) ) | '<?' ID ( attribute )* '?>' | '<' '/' ID '>' -> ^( XMLCLOSEELEM ID ) | '<' ID ( attribute )* '/>' );
	[GrammarRule("element")]
	public mccarthyParser.element_return element()
	{
		EnterRule_element();
		EnterRule("element", 26);
		TraceIn("element", 26);
		mccarthyParser.element_return retval = new mccarthyParser.element_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal52 = default(CommonToken);
		CommonToken ID53 = default(CommonToken);
		CommonToken char_literal55 = default(CommonToken);
		CommonToken string_literal56 = default(CommonToken);
		CommonToken ID57 = default(CommonToken);
		CommonToken string_literal59 = default(CommonToken);
		CommonToken char_literal60 = default(CommonToken);
		CommonToken char_literal61 = default(CommonToken);
		CommonToken ID62 = default(CommonToken);
		CommonToken char_literal63 = default(CommonToken);
		CommonToken char_literal64 = default(CommonToken);
		CommonToken ID65 = default(CommonToken);
		CommonToken string_literal67 = default(CommonToken);
		mccarthyParser.attribute_return attribute54 = default(mccarthyParser.attribute_return);
		mccarthyParser.attribute_return attribute58 = default(mccarthyParser.attribute_return);
		mccarthyParser.attribute_return attribute66 = default(mccarthyParser.attribute_return);

		CommonTree char_literal52_tree = default(CommonTree);
		CommonTree ID53_tree = default(CommonTree);
		CommonTree char_literal55_tree = default(CommonTree);
		CommonTree string_literal56_tree = default(CommonTree);
		CommonTree ID57_tree = default(CommonTree);
		CommonTree string_literal59_tree = default(CommonTree);
		CommonTree char_literal60_tree = default(CommonTree);
		CommonTree char_literal61_tree = default(CommonTree);
		CommonTree ID62_tree = default(CommonTree);
		CommonTree char_literal63_tree = default(CommonTree);
		CommonTree char_literal64_tree = default(CommonTree);
		CommonTree ID65_tree = default(CommonTree);
		CommonTree string_literal67_tree = default(CommonTree);
		RewriteRuleITokenStream stream_52=new RewriteRuleITokenStream(adaptor,"token 52");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_60=new RewriteRuleITokenStream(adaptor,"token 60");
		RewriteRuleITokenStream stream_48=new RewriteRuleITokenStream(adaptor,"token 48");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "element");
		DebugLocation(215, 12);
		try
		{
			// mccarthy.g3:215:20: ( '<' ID ( attribute )* '>' -> ^( XMLOPENELEM ID ^( XMLATTRS ( attribute )* ) ) | '<?' ID ( attribute )* '?>' | '<' '/' ID '>' -> ^( XMLCLOSEELEM ID ) | '<' ID ( attribute )* '/>' )
			int alt13=4;
			try { DebugEnterDecision(13, false);
			try
			{
				alt13 = dfa13.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// mccarthy.g3:215:24: '<' ID ( attribute )* '>'
				{
				DebugLocation(215, 24);
				char_literal52=(CommonToken)Match(input,52,Follow._52_in_element1382);  
				stream_52.Add(char_literal52);

				DebugLocation(215, 28);
				ID53=(CommonToken)Match(input,ID,Follow._ID_in_element1384);  
				stream_ID.Add(ID53);

				DebugLocation(215, 31);
				// mccarthy.g3:215:31: ( attribute )*
				try { DebugEnterSubRule(10);
				while (true)
				{
					int alt10=2;
					try { DebugEnterDecision(10, false);
					int LA10_0 = input.LA(1);

					if ((LA10_0==ID))
					{
						alt10 = 1;
					}


					} finally { DebugExitDecision(10); }
					switch ( alt10 )
					{
					case 1:
						DebugEnterAlt(1);
						// mccarthy.g3:215:31: attribute
						{
						DebugLocation(215, 31);
						PushFollow(Follow._attribute_in_element1386);
						attribute54=attribute();
						PopFollow();

						stream_attribute.Add(attribute54.Tree);

						}
						break;

					default:
						goto loop10;
					}
				}

				loop10:
					;

				} finally { DebugExitSubRule(10); }

				DebugLocation(215, 42);
				char_literal55=(CommonToken)Match(input,60,Follow._60_in_element1389);  
				stream_60.Add(char_literal55);



				{
				// AST REWRITE
				// elements: ID, attribute
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 215:46: -> ^( XMLOPENELEM ID ^( XMLATTRS ( attribute )* ) )
				{
					DebugLocation(215, 49);
					// mccarthy.g3:215:49: ^( XMLOPENELEM ID ^( XMLATTRS ( attribute )* ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(215, 51);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(XMLOPENELEM, "XMLOPENELEM"), root_1);

					DebugLocation(215, 63);
					adaptor.AddChild(root_1, stream_ID.NextNode());
					DebugLocation(215, 66);
					// mccarthy.g3:215:66: ^( XMLATTRS ( attribute )* )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(215, 68);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(XMLATTRS, "XMLATTRS"), root_2);

					DebugLocation(215, 77);
					// mccarthy.g3:215:77: ( attribute )*
					while ( stream_attribute.HasNext )
					{
						DebugLocation(215, 77);
						adaptor.AddChild(root_2, stream_attribute.NextTree());

					}
					stream_attribute.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// mccarthy.g3:216:17: '<?' ID ( attribute )* '?>'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(216, 17);
				string_literal56=(CommonToken)Match(input,53,Follow._53_in_element1422); 
				string_literal56_tree = (CommonTree)adaptor.Create(string_literal56);
				adaptor.AddChild(root_0, string_literal56_tree);

				DebugLocation(216, 22);
				ID57=(CommonToken)Match(input,ID,Follow._ID_in_element1424); 
				ID57_tree = (CommonTree)adaptor.Create(ID57);
				adaptor.AddChild(root_0, ID57_tree);

				DebugLocation(216, 25);
				// mccarthy.g3:216:25: ( attribute )*
				try { DebugEnterSubRule(11);
				while (true)
				{
					int alt11=2;
					try { DebugEnterDecision(11, false);
					int LA11_0 = input.LA(1);

					if ((LA11_0==ID))
					{
						alt11 = 1;
					}


					} finally { DebugExitDecision(11); }
					switch ( alt11 )
					{
					case 1:
						DebugEnterAlt(1);
						// mccarthy.g3:216:25: attribute
						{
						DebugLocation(216, 25);
						PushFollow(Follow._attribute_in_element1426);
						attribute58=attribute();
						PopFollow();

						adaptor.AddChild(root_0, attribute58.Tree);

						}
						break;

					default:
						goto loop11;
					}
				}

				loop11:
					;

				} finally { DebugExitSubRule(11); }

				DebugLocation(216, 36);
				string_literal59=(CommonToken)Match(input,62,Follow._62_in_element1429); 
				string_literal59_tree = (CommonTree)adaptor.Create(string_literal59);
				adaptor.AddChild(root_0, string_literal59_tree);


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// mccarthy.g3:217:17: '<' '/' ID '>'
				{
				DebugLocation(217, 17);
				char_literal60=(CommonToken)Match(input,52,Follow._52_in_element1448);  
				stream_52.Add(char_literal60);

				DebugLocation(217, 21);
				char_literal61=(CommonToken)Match(input,48,Follow._48_in_element1450);  
				stream_48.Add(char_literal61);

				DebugLocation(217, 25);
				ID62=(CommonToken)Match(input,ID,Follow._ID_in_element1452);  
				stream_ID.Add(ID62);

				DebugLocation(217, 28);
				char_literal63=(CommonToken)Match(input,60,Follow._60_in_element1454);  
				stream_60.Add(char_literal63);



				{
				// AST REWRITE
				// elements: ID
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 217:32: -> ^( XMLCLOSEELEM ID )
				{
					DebugLocation(217, 34);
					// mccarthy.g3:217:34: ^( XMLCLOSEELEM ID )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(217, 36);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(XMLCLOSEELEM, "XMLCLOSEELEM"), root_1);

					DebugLocation(217, 49);
					adaptor.AddChild(root_1, stream_ID.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// mccarthy.g3:218:17: '<' ID ( attribute )* '/>'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(218, 17);
				char_literal64=(CommonToken)Match(input,52,Follow._52_in_element1479); 
				char_literal64_tree = (CommonTree)adaptor.Create(char_literal64);
				adaptor.AddChild(root_0, char_literal64_tree);

				DebugLocation(218, 21);
				ID65=(CommonToken)Match(input,ID,Follow._ID_in_element1481); 
				ID65_tree = (CommonTree)adaptor.Create(ID65);
				adaptor.AddChild(root_0, ID65_tree);

				DebugLocation(218, 24);
				// mccarthy.g3:218:24: ( attribute )*
				try { DebugEnterSubRule(12);
				while (true)
				{
					int alt12=2;
					try { DebugEnterDecision(12, false);
					int LA12_0 = input.LA(1);

					if ((LA12_0==ID))
					{
						alt12 = 1;
					}


					} finally { DebugExitDecision(12); }
					switch ( alt12 )
					{
					case 1:
						DebugEnterAlt(1);
						// mccarthy.g3:218:24: attribute
						{
						DebugLocation(218, 24);
						PushFollow(Follow._attribute_in_element1483);
						attribute66=attribute();
						PopFollow();

						adaptor.AddChild(root_0, attribute66.Tree);

						}
						break;

					default:
						goto loop12;
					}
				}

				loop12:
					;

				} finally { DebugExitSubRule(12); }

				DebugLocation(218, 35);
				string_literal67=(CommonToken)Match(input,49,Follow._49_in_element1486); 
				string_literal67_tree = (CommonTree)adaptor.Create(string_literal67);
				adaptor.AddChild(root_0, string_literal67_tree);


				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("element", 26);
			LeaveRule("element", 26);
			LeaveRule_element();
		}
		DebugLocation(219, 12);
		} finally { DebugExitRule(GrammarFileName, "element"); }
		return retval;

	}
	// $ANTLR end "element"

	public sealed partial class attribute_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public attribute_return(mccarthyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(mccarthyParser grammar);
	}

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();

	// $ANTLR start "attribute"
	// mccarthy.g3:220:8: public attribute : ID '=' STRING -> ^( XMLATTR ID ^( VALSTR STRING ) ) ;
	[GrammarRule("attribute")]
	public mccarthyParser.attribute_return attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 27);
		TraceIn("attribute", 27);
		mccarthyParser.attribute_return retval = new mccarthyParser.attribute_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken ID68 = default(CommonToken);
		CommonToken char_literal69 = default(CommonToken);
		CommonToken STRING70 = default(CommonToken);

		CommonTree ID68_tree = default(CommonTree);
		CommonTree char_literal69_tree = default(CommonTree);
		CommonTree STRING70_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_54=new RewriteRuleITokenStream(adaptor,"token 54");
		RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");

		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(220, 69);
		try
		{
			// mccarthy.g3:220:20: ( ID '=' STRING -> ^( XMLATTR ID ^( VALSTR STRING ) ) )
			DebugEnterAlt(1);
			// mccarthy.g3:220:23: ID '=' STRING
			{
			DebugLocation(220, 23);
			ID68=(CommonToken)Match(input,ID,Follow._ID_in_attribute1511);  
			stream_ID.Add(ID68);

			DebugLocation(220, 26);
			char_literal69=(CommonToken)Match(input,54,Follow._54_in_attribute1513);  
			stream_54.Add(char_literal69);

			DebugLocation(220, 30);
			STRING70=(CommonToken)Match(input,STRING,Follow._STRING_in_attribute1515);  
			stream_STRING.Add(STRING70);



			{
			// AST REWRITE
			// elements: ID, STRING
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 220:37: -> ^( XMLATTR ID ^( VALSTR STRING ) )
			{
				DebugLocation(220, 40);
				// mccarthy.g3:220:40: ^( XMLATTR ID ^( VALSTR STRING ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(220, 42);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(XMLATTR, "XMLATTR"), root_1);

				DebugLocation(220, 50);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(220, 53);
				// mccarthy.g3:220:53: ^( VALSTR STRING )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(220, 55);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VALSTR, "VALSTR"), root_2);

				DebugLocation(220, 62);
				adaptor.AddChild(root_2, stream_STRING.NextNode());

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute", 27);
			LeaveRule("attribute", 27);
			LeaveRule_attribute();
		}
		DebugLocation(220, 69);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return retval;

	}
	// $ANTLR end "attribute"

	private sealed partial class reference_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public reference_return(mccarthyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(mccarthyParser grammar);
	}

	partial void EnterRule_reference();
	partial void LeaveRule_reference();

	// $ANTLR start "reference"
	// mccarthy.g3:221:1: reference :;
	[GrammarRule("reference")]
	private mccarthyParser.reference_return reference()
	{
		EnterRule_reference();
		EnterRule("reference", 28);
		TraceIn("reference", 28);
		mccarthyParser.reference_return retval = new mccarthyParser.reference_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "reference");
		DebugLocation(221, 3);
		try
		{
			// mccarthy.g3:222:2: ()
			DebugEnterAlt(1);
			// mccarthy.g3:222:4: 
			{
			root_0 = (CommonTree)adaptor.Nil();

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("reference", 28);
			LeaveRule("reference", 28);
			LeaveRule_reference();
		}
		DebugLocation(222, 3);
		} finally { DebugExitRule(GrammarFileName, "reference"); }
		return retval;

	}
	// $ANTLR end "reference"
	#endregion Rules


	#region DFA
	private DFA5 dfa5;
	private DFA13 dfa13;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa5 = new DFA5( this );
		dfa13 = new DFA13( this );
	}

	private class DFA5 : DFA
	{
		private const string DFA5_eotS =
			"\xF\xFFFF";
		private const string DFA5_eofS =
			"\xF\xFFFF";
		private const string DFA5_minS =
			"\x1\xF\x1\x14\x1\xF\x6\xFFFF\x1\x14\x1\xF\x3\xFFFF\x1\x14";
		private const string DFA5_maxS =
			"\x1\x2B\x1\x3B\x1\xF\x6\xFFFF\x1\x39\x1\xF\x3\xFFFF\x1\x39";
		private const string DFA5_acceptS =
			"\x3\xFFFF\x1\x1\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9\x2\xFFFF\x1\x2\x1\x3\x1"+
			"\x4\x1\xFFFF";
		private const string DFA5_specialS =
			"\xF\xFFFF}>";
		private static readonly string[] DFA5_transitionS =
			{
				"\x1\x1\x1B\xFFFF\x1\x2",
				"\x1\x4\x15\xFFFF\x1\x8\x4\xFFFF\x1\x5\x6\xFFFF\x1\x3\x3\xFFFF\x1\x6"+
				"\x1\x7",
				"\x1\x9",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x4\x1B\xFFFF\x1\xA\x6\xFFFF\x1\xD\x1\xB\x1\xC",
				"\x1\xE",
				"",
				"",
				"",
				"\x1\x4\x1B\xFFFF\x1\xA\x6\xFFFF\x1\xD\x1\xB\x1\xC"
			};

		private static readonly short[] DFA5_eot = DFA.UnpackEncodedString(DFA5_eotS);
		private static readonly short[] DFA5_eof = DFA.UnpackEncodedString(DFA5_eofS);
		private static readonly char[] DFA5_min = DFA.UnpackEncodedStringToUnsignedChars(DFA5_minS);
		private static readonly char[] DFA5_max = DFA.UnpackEncodedStringToUnsignedChars(DFA5_maxS);
		private static readonly short[] DFA5_accept = DFA.UnpackEncodedString(DFA5_acceptS);
		private static readonly short[] DFA5_special = DFA.UnpackEncodedString(DFA5_specialS);
		private static readonly short[][] DFA5_transition;

		static DFA5()
		{
			int numStates = DFA5_transitionS.Length;
			DFA5_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA5_transition[i] = DFA.UnpackEncodedString(DFA5_transitionS[i]);
			}
		}

		public DFA5( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 5;
			this.eot = DFA5_eot;
			this.eof = DFA5_eof;
			this.min = DFA5_min;
			this.max = DFA5_max;
			this.accept = DFA5_accept;
			this.special = DFA5_special;
			this.transition = DFA5_transition;
		}

		public override string Description { get { return "134:8: public statement : ( assignment | replaceOperation | appendOperation | prependOperation | matchOperation | moveOperation | moveFrontOperation | moveBackOperation | deleteOperation );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA13 : DFA
	{
		private const string DFA13_eotS =
			"\xA\xFFFF";
		private const string DFA13_eofS =
			"\xA\xFFFF";
		private const string DFA13_minS =
			"\x1\x34\x1\xF\x1\xFFFF\x1\xF\x1\xFFFF\x1\x36\x2\xFFFF\x1\x1C\x1\xF";
		private const string DFA13_maxS =
			"\x1\x35\x1\x30\x1\xFFFF\x1\x3C\x1\xFFFF\x1\x36\x2\xFFFF\x1\x1C\x1\x3C";
		private const string DFA13_acceptS =
			"\x2\xFFFF\x1\x2\x1\xFFFF\x1\x3\x1\xFFFF\x1\x1\x1\x4\x2\xFFFF";
		private const string DFA13_specialS =
			"\xA\xFFFF}>";
		private static readonly string[] DFA13_transitionS =
			{
				"\x1\x1\x1\x2",
				"\x1\x3\x20\xFFFF\x1\x4",
				"",
				"\x1\x5\x21\xFFFF\x1\x7\xA\xFFFF\x1\x6",
				"",
				"\x1\x8",
				"",
				"",
				"\x1\x9",
				"\x1\x5\x21\xFFFF\x1\x7\xA\xFFFF\x1\x6"
			};

		private static readonly short[] DFA13_eot = DFA.UnpackEncodedString(DFA13_eotS);
		private static readonly short[] DFA13_eof = DFA.UnpackEncodedString(DFA13_eofS);
		private static readonly char[] DFA13_min = DFA.UnpackEncodedStringToUnsignedChars(DFA13_minS);
		private static readonly char[] DFA13_max = DFA.UnpackEncodedStringToUnsignedChars(DFA13_maxS);
		private static readonly short[] DFA13_accept = DFA.UnpackEncodedString(DFA13_acceptS);
		private static readonly short[] DFA13_special = DFA.UnpackEncodedString(DFA13_specialS);
		private static readonly short[][] DFA13_transition;

		static DFA13()
		{
			int numStates = DFA13_transitionS.Length;
			DFA13_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA13_transition[i] = DFA.UnpackEncodedString(DFA13_transitionS[i]);
			}
		}

		public DFA13( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 13;
			this.eot = DFA13_eot;
			this.eof = DFA13_eof;
			this.min = DFA13_min;
			this.max = DFA13_max;
			this.accept = DFA13_accept;
			this.special = DFA13_special;
			this.transition = DFA13_transition;
		}

		public override string Description { get { return "215:8: public element : ( '<' ID ( attribute )* '>' -> ^( XMLOPENELEM ID ^( XMLATTRS ( attribute )* ) ) | '<?' ID ( attribute )* '?>' | '<' '/' ID '>' -> ^( XMLCLOSEELEM ID ) | '<' ID ( attribute )* '/>' );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _moduleDeclaration_in_module578 = new BitSet(new ulong[]{0x8000000000008000UL});
		public static readonly BitSet _importDeclarations_in_module588 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _functionDeclarations_in_module597 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_module604 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _importDeclaration_in_importDeclarations660 = new BitSet(new ulong[]{0x8000000000000002UL});
		public static readonly BitSet _63_in_importDeclaration673 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _ID_in_importDeclaration675 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _51_in_importDeclaration677 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _64_in_moduleDeclaration695 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _ID_in_moduleDeclaration697 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _51_in_moduleDeclaration699 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionDeclaration_in_functionDeclarations719 = new BitSet(new ulong[]{0x8002UL});
		public static readonly BitSet _ID_in_functionDeclaration734 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _44_in_functionDeclaration736 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _argList_in_functionDeclaration740 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _45_in_functionDeclaration742 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _65_in_functionDeclaration744 = new BitSet(new ulong[]{0x80000008000UL,0x4UL});
		public static readonly BitSet _statements_in_functionDeclaration748 = new BitSet(new ulong[]{0x0UL,0x4UL});
		public static readonly BitSet _66_in_functionDeclaration750 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arg_in_argList788 = new BitSet(new ulong[]{0x400000000002UL});
		public static readonly BitSet _46_in_argList791 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _arg_in_argList793 = new BitSet(new ulong[]{0x400000000002UL});
		public static readonly BitSet _ID_in_arg815 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _50_in_arg817 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _ID_in_arg821 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_statements849 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _51_in_statements851 = new BitSet(new ulong[]{0x80000008002UL});
		public static readonly BitSet _assignment_in_statement876 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _replaceOperation_in_statement881 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _appendOperation_in_statement886 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _prependOperation_in_statement891 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _matchOperation_in_statement896 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _moveOperation_in_statement901 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _moveFrontOperation_in_statement906 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _moveBackOperation_in_statement911 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _deleteOperation_in_statement916 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INT_in_value931 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_value947 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_value963 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_assignment986 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _54_in_assignment988 = new BitSet(new ulong[]{0x10018000UL});
		public static readonly BitSet _value_in_assignment990 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pathExpression_in_replaceOperation1004 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _56_in_replaceOperation1006 = new BitSet(new ulong[]{0x10018000UL});
		public static readonly BitSet _value_in_replaceOperation1010 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _43_in_pathExpression1035 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _ID_in_pathExpression1039 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _xpathSegments_in_pathExpression1043 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _48_in_xpathSegments1072 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _ID_in_xpathSegments1074 = new BitSet(new ulong[]{0x1000000000002UL});
		public static readonly BitSet _pathExpression_in_appendOperation1098 = new BitSet(new ulong[]{0x200000000000000UL});
		public static readonly BitSet _57_in_appendOperation1100 = new BitSet(new ulong[]{0x10018000UL});
		public static readonly BitSet _value_in_appendOperation1104 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pathExpression_in_prependOperation1131 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _55_in_prependOperation1133 = new BitSet(new ulong[]{0x10018000UL});
		public static readonly BitSet _value_in_prependOperation1137 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_matchOperation1181 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _MATCHOP_in_matchOperation1183 = new BitSet(new ulong[]{0x30000000000000UL});
		public static readonly BitSet _content_in_matchOperation1185 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pathExpression_in_matchOperation1203 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _MATCHOP_in_matchOperation1205 = new BitSet(new ulong[]{0x30000000000000UL});
		public static readonly BitSet _content_in_matchOperation1207 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_moveOperation1230 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_moveOperation1232 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _ID_in_moveOperation1237 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_moveFrontOperation1251 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _58_in_moveFrontOperation1253 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _ID_in_moveFrontOperation1258 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_moveBackOperation1271 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _59_in_moveBackOperation1273 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _ID_in_moveBackOperation1278 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_deleteOperation1291 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _42_in_deleteOperation1293 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _ID_in_deleteOperation1298 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _61_in_pattern1308 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _ID_in_pattern1310 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _41_in_valueOf1325 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _ID_in_valueOf1327 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _element_in_content1356 = new BitSet(new ulong[]{0x30000000000002UL});
		public static readonly BitSet _52_in_element1382 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _ID_in_element1384 = new BitSet(new ulong[]{0x1000000000008000UL});
		public static readonly BitSet _attribute_in_element1386 = new BitSet(new ulong[]{0x1000000000008000UL});
		public static readonly BitSet _60_in_element1389 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _53_in_element1422 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _ID_in_element1424 = new BitSet(new ulong[]{0x4000000000008000UL});
		public static readonly BitSet _attribute_in_element1426 = new BitSet(new ulong[]{0x4000000000008000UL});
		public static readonly BitSet _62_in_element1429 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _52_in_element1448 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _48_in_element1450 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _ID_in_element1452 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_element1454 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _52_in_element1479 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _ID_in_element1481 = new BitSet(new ulong[]{0x2000000008000UL});
		public static readonly BitSet _attribute_in_element1483 = new BitSet(new ulong[]{0x2000000008000UL});
		public static readonly BitSet _49_in_element1486 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_attribute1511 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _54_in_attribute1513 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _STRING_in_attribute1515 = new BitSet(new ulong[]{0x2UL});

	}
	#endregion Follow sets
}

} // namespace xmlpl_parser
