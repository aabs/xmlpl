//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.3.1.7705
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.3.1.7705 mccarthy.g3 2012-03-20 21:20:25

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162


using System;


using System.Collections.Generic;
using Antlr.Runtime;

namespace xmlpl_parser
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.3.1.7705")]
[System.CLSCompliant(false)]
public partial class mccarthyLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int APPEND=4;
	public const int ARG=5;
	public const int ARGLIST=6;
	public const int BINDING=7;
	public const int BLOCK=8;
	public const int COMMENT=9;
	public const int DIGIT=10;
	public const int FUNCBODY=11;
	public const int FUNCDEC=12;
	public const int FUNCDECLIST=13;
	public const int GENERIC_ID=14;
	public const int ID=15;
	public const int INT=16;
	public const int Imports=17;
	public const int LETTER=18;
	public const int MATCH=19;
	public const int MATCHOP=20;
	public const int NAMECHAR=21;
	public const int PATH=22;
	public const int PATHCTX=23;
	public const int PREPEND=24;
	public const int REPLACE=25;
	public const int ROOT=26;
	public const int SEG=27;
	public const int STRING=28;
	public const int TEXT=29;
	public const int VALINT=30;
	public const int VALSTR=31;
	public const int VARREF=32;
	public const int WS=33;
	public const int XML=34;
	public const int XMLATTR=35;
	public const int XMLATTRS=36;
	public const int XMLCHILDREN=37;
	public const int XMLCLOSEELEM=38;
	public const int XMLOPENELEM=39;
	public const int XMLTEXT=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;
	public const int T__50=50;
	public const int T__51=51;
	public const int T__52=52;
	public const int T__53=53;
	public const int T__54=54;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int T__59=59;
	public const int T__60=60;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;

	private int openTags = 0;
	private bool readyForAttrs = false;

	void inTagStart(){readyForAttrs = true;Console.WriteLine("starting xml tag");}
	void inTagBody(){openTags++;readyForAttrs = false;Console.WriteLine("inside xml tag body");} 
	void outOfTag(){openTags--;readyForAttrs = false;Console.WriteLine("left xml tag");}


    // delegates
    // delegators

	public mccarthyLexer()
	{
		OnCreated();
	}

	public mccarthyLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public mccarthyLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{


		OnCreated();
	}
	public override string GrammarFileName { get { return "mccarthy.g3"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_T__41();
	partial void LeaveRule_T__41();

	// $ANTLR start "T__41"
	[GrammarRule("T__41")]
	private void mT__41()
	{
		EnterRule_T__41();
		EnterRule("T__41", 1);
		TraceIn("T__41", 1);
		try
		{
			int _type = T__41;
			int _channel = DefaultTokenChannel;
			// mccarthy.g3:21:7: ( '!' )
			DebugEnterAlt(1);
			// mccarthy.g3:21:9: '!'
			{
			DebugLocation(21, 9);
			Match('!'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__41", 1);
			LeaveRule("T__41", 1);
			LeaveRule_T__41();
		}
	}
	// $ANTLR end "T__41"

	partial void EnterRule_T__42();
	partial void LeaveRule_T__42();

	// $ANTLR start "T__42"
	[GrammarRule("T__42")]
	private void mT__42()
	{
		EnterRule_T__42();
		EnterRule("T__42", 2);
		TraceIn("T__42", 2);
		try
		{
			int _type = T__42;
			int _channel = DefaultTokenChannel;
			// mccarthy.g3:22:7: ( '!=' )
			DebugEnterAlt(1);
			// mccarthy.g3:22:9: '!='
			{
			DebugLocation(22, 9);
			Match("!="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__42", 2);
			LeaveRule("T__42", 2);
			LeaveRule_T__42();
		}
	}
	// $ANTLR end "T__42"

	partial void EnterRule_T__43();
	partial void LeaveRule_T__43();

	// $ANTLR start "T__43"
	[GrammarRule("T__43")]
	private void mT__43()
	{
		EnterRule_T__43();
		EnterRule("T__43", 3);
		TraceIn("T__43", 3);
		try
		{
			int _type = T__43;
			int _channel = DefaultTokenChannel;
			// mccarthy.g3:23:7: ( '$' )
			DebugEnterAlt(1);
			// mccarthy.g3:23:9: '$'
			{
			DebugLocation(23, 9);
			Match('$'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__43", 3);
			LeaveRule("T__43", 3);
			LeaveRule_T__43();
		}
	}
	// $ANTLR end "T__43"

	partial void EnterRule_T__44();
	partial void LeaveRule_T__44();

	// $ANTLR start "T__44"
	[GrammarRule("T__44")]
	private void mT__44()
	{
		EnterRule_T__44();
		EnterRule("T__44", 4);
		TraceIn("T__44", 4);
		try
		{
			int _type = T__44;
			int _channel = DefaultTokenChannel;
			// mccarthy.g3:24:7: ( '(' )
			DebugEnterAlt(1);
			// mccarthy.g3:24:9: '('
			{
			DebugLocation(24, 9);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__44", 4);
			LeaveRule("T__44", 4);
			LeaveRule_T__44();
		}
	}
	// $ANTLR end "T__44"

	partial void EnterRule_T__45();
	partial void LeaveRule_T__45();

	// $ANTLR start "T__45"
	[GrammarRule("T__45")]
	private void mT__45()
	{
		EnterRule_T__45();
		EnterRule("T__45", 5);
		TraceIn("T__45", 5);
		try
		{
			int _type = T__45;
			int _channel = DefaultTokenChannel;
			// mccarthy.g3:25:7: ( ')' )
			DebugEnterAlt(1);
			// mccarthy.g3:25:9: ')'
			{
			DebugLocation(25, 9);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__45", 5);
			LeaveRule("T__45", 5);
			LeaveRule_T__45();
		}
	}
	// $ANTLR end "T__45"

	partial void EnterRule_T__46();
	partial void LeaveRule_T__46();

	// $ANTLR start "T__46"
	[GrammarRule("T__46")]
	private void mT__46()
	{
		EnterRule_T__46();
		EnterRule("T__46", 6);
		TraceIn("T__46", 6);
		try
		{
			int _type = T__46;
			int _channel = DefaultTokenChannel;
			// mccarthy.g3:26:7: ( ',' )
			DebugEnterAlt(1);
			// mccarthy.g3:26:9: ','
			{
			DebugLocation(26, 9);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__46", 6);
			LeaveRule("T__46", 6);
			LeaveRule_T__46();
		}
	}
	// $ANTLR end "T__46"

	partial void EnterRule_T__47();
	partial void LeaveRule_T__47();

	// $ANTLR start "T__47"
	[GrammarRule("T__47")]
	private void mT__47()
	{
		EnterRule_T__47();
		EnterRule("T__47", 7);
		TraceIn("T__47", 7);
		try
		{
			int _type = T__47;
			int _channel = DefaultTokenChannel;
			// mccarthy.g3:27:7: ( '->' )
			DebugEnterAlt(1);
			// mccarthy.g3:27:9: '->'
			{
			DebugLocation(27, 9);
			Match("->"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__47", 7);
			LeaveRule("T__47", 7);
			LeaveRule_T__47();
		}
	}
	// $ANTLR end "T__47"

	partial void EnterRule_T__48();
	partial void LeaveRule_T__48();

	// $ANTLR start "T__48"
	[GrammarRule("T__48")]
	private void mT__48()
	{
		EnterRule_T__48();
		EnterRule("T__48", 8);
		TraceIn("T__48", 8);
		try
		{
			int _type = T__48;
			int _channel = DefaultTokenChannel;
			// mccarthy.g3:28:7: ( '/' )
			DebugEnterAlt(1);
			// mccarthy.g3:28:9: '/'
			{
			DebugLocation(28, 9);
			Match('/'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__48", 8);
			LeaveRule("T__48", 8);
			LeaveRule_T__48();
		}
	}
	// $ANTLR end "T__48"

	partial void EnterRule_T__49();
	partial void LeaveRule_T__49();

	// $ANTLR start "T__49"
	[GrammarRule("T__49")]
	private void mT__49()
	{
		EnterRule_T__49();
		EnterRule("T__49", 9);
		TraceIn("T__49", 9);
		try
		{
			int _type = T__49;
			int _channel = DefaultTokenChannel;
			// mccarthy.g3:29:7: ( '/>' )
			DebugEnterAlt(1);
			// mccarthy.g3:29:9: '/>'
			{
			DebugLocation(29, 9);
			Match("/>"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__49", 9);
			LeaveRule("T__49", 9);
			LeaveRule_T__49();
		}
	}
	// $ANTLR end "T__49"

	partial void EnterRule_T__50();
	partial void LeaveRule_T__50();

	// $ANTLR start "T__50"
	[GrammarRule("T__50")]
	private void mT__50()
	{
		EnterRule_T__50();
		EnterRule("T__50", 10);
		TraceIn("T__50", 10);
		try
		{
			int _type = T__50;
			int _channel = DefaultTokenChannel;
			// mccarthy.g3:30:7: ( ':' )
			DebugEnterAlt(1);
			// mccarthy.g3:30:9: ':'
			{
			DebugLocation(30, 9);
			Match(':'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__50", 10);
			LeaveRule("T__50", 10);
			LeaveRule_T__50();
		}
	}
	// $ANTLR end "T__50"

	partial void EnterRule_T__51();
	partial void LeaveRule_T__51();

	// $ANTLR start "T__51"
	[GrammarRule("T__51")]
	private void mT__51()
	{
		EnterRule_T__51();
		EnterRule("T__51", 11);
		TraceIn("T__51", 11);
		try
		{
			int _type = T__51;
			int _channel = DefaultTokenChannel;
			// mccarthy.g3:31:7: ( ';' )
			DebugEnterAlt(1);
			// mccarthy.g3:31:9: ';'
			{
			DebugLocation(31, 9);
			Match(';'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__51", 11);
			LeaveRule("T__51", 11);
			LeaveRule_T__51();
		}
	}
	// $ANTLR end "T__51"

	partial void EnterRule_T__52();
	partial void LeaveRule_T__52();

	// $ANTLR start "T__52"
	[GrammarRule("T__52")]
	private void mT__52()
	{
		EnterRule_T__52();
		EnterRule("T__52", 12);
		TraceIn("T__52", 12);
		try
		{
			int _type = T__52;
			int _channel = DefaultTokenChannel;
			// mccarthy.g3:32:7: ( '<' )
			DebugEnterAlt(1);
			// mccarthy.g3:32:9: '<'
			{
			DebugLocation(32, 9);
			Match('<'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__52", 12);
			LeaveRule("T__52", 12);
			LeaveRule_T__52();
		}
	}
	// $ANTLR end "T__52"

	partial void EnterRule_T__53();
	partial void LeaveRule_T__53();

	// $ANTLR start "T__53"
	[GrammarRule("T__53")]
	private void mT__53()
	{
		EnterRule_T__53();
		EnterRule("T__53", 13);
		TraceIn("T__53", 13);
		try
		{
			int _type = T__53;
			int _channel = DefaultTokenChannel;
			// mccarthy.g3:33:7: ( '<?' )
			DebugEnterAlt(1);
			// mccarthy.g3:33:9: '<?'
			{
			DebugLocation(33, 9);
			Match("<?"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__53", 13);
			LeaveRule("T__53", 13);
			LeaveRule_T__53();
		}
	}
	// $ANTLR end "T__53"

	partial void EnterRule_T__54();
	partial void LeaveRule_T__54();

	// $ANTLR start "T__54"
	[GrammarRule("T__54")]
	private void mT__54()
	{
		EnterRule_T__54();
		EnterRule("T__54", 14);
		TraceIn("T__54", 14);
		try
		{
			int _type = T__54;
			int _channel = DefaultTokenChannel;
			// mccarthy.g3:34:7: ( '=' )
			DebugEnterAlt(1);
			// mccarthy.g3:34:9: '='
			{
			DebugLocation(34, 9);
			Match('='); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__54", 14);
			LeaveRule("T__54", 14);
			LeaveRule_T__54();
		}
	}
	// $ANTLR end "T__54"

	partial void EnterRule_T__55();
	partial void LeaveRule_T__55();

	// $ANTLR start "T__55"
	[GrammarRule("T__55")]
	private void mT__55()
	{
		EnterRule_T__55();
		EnterRule("T__55", 15);
		TraceIn("T__55", 15);
		try
		{
			int _type = T__55;
			int _channel = DefaultTokenChannel;
			// mccarthy.g3:35:7: ( '=<' )
			DebugEnterAlt(1);
			// mccarthy.g3:35:9: '=<'
			{
			DebugLocation(35, 9);
			Match("=<"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__55", 15);
			LeaveRule("T__55", 15);
			LeaveRule_T__55();
		}
	}
	// $ANTLR end "T__55"

	partial void EnterRule_T__56();
	partial void LeaveRule_T__56();

	// $ANTLR start "T__56"
	[GrammarRule("T__56")]
	private void mT__56()
	{
		EnterRule_T__56();
		EnterRule("T__56", 16);
		TraceIn("T__56", 16);
		try
		{
			int _type = T__56;
			int _channel = DefaultTokenChannel;
			// mccarthy.g3:36:7: ( '==' )
			DebugEnterAlt(1);
			// mccarthy.g3:36:9: '=='
			{
			DebugLocation(36, 9);
			Match("=="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__56", 16);
			LeaveRule("T__56", 16);
			LeaveRule_T__56();
		}
	}
	// $ANTLR end "T__56"

	partial void EnterRule_T__57();
	partial void LeaveRule_T__57();

	// $ANTLR start "T__57"
	[GrammarRule("T__57")]
	private void mT__57()
	{
		EnterRule_T__57();
		EnterRule("T__57", 17);
		TraceIn("T__57", 17);
		try
		{
			int _type = T__57;
			int _channel = DefaultTokenChannel;
			// mccarthy.g3:37:7: ( '=>' )
			DebugEnterAlt(1);
			// mccarthy.g3:37:9: '=>'
			{
			DebugLocation(37, 9);
			Match("=>"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__57", 17);
			LeaveRule("T__57", 17);
			LeaveRule_T__57();
		}
	}
	// $ANTLR end "T__57"

	partial void EnterRule_T__58();
	partial void LeaveRule_T__58();

	// $ANTLR start "T__58"
	[GrammarRule("T__58")]
	private void mT__58()
	{
		EnterRule_T__58();
		EnterRule("T__58", 18);
		TraceIn("T__58", 18);
		try
		{
			int _type = T__58;
			int _channel = DefaultTokenChannel;
			// mccarthy.g3:38:7: ( '=><' )
			DebugEnterAlt(1);
			// mccarthy.g3:38:9: '=><'
			{
			DebugLocation(38, 9);
			Match("=><"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__58", 18);
			LeaveRule("T__58", 18);
			LeaveRule_T__58();
		}
	}
	// $ANTLR end "T__58"

	partial void EnterRule_T__59();
	partial void LeaveRule_T__59();

	// $ANTLR start "T__59"
	[GrammarRule("T__59")]
	private void mT__59()
	{
		EnterRule_T__59();
		EnterRule("T__59", 19);
		TraceIn("T__59", 19);
		try
		{
			int _type = T__59;
			int _channel = DefaultTokenChannel;
			// mccarthy.g3:39:7: ( '=>>' )
			DebugEnterAlt(1);
			// mccarthy.g3:39:9: '=>>'
			{
			DebugLocation(39, 9);
			Match("=>>"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__59", 19);
			LeaveRule("T__59", 19);
			LeaveRule_T__59();
		}
	}
	// $ANTLR end "T__59"

	partial void EnterRule_T__60();
	partial void LeaveRule_T__60();

	// $ANTLR start "T__60"
	[GrammarRule("T__60")]
	private void mT__60()
	{
		EnterRule_T__60();
		EnterRule("T__60", 20);
		TraceIn("T__60", 20);
		try
		{
			int _type = T__60;
			int _channel = DefaultTokenChannel;
			// mccarthy.g3:40:7: ( '>' )
			DebugEnterAlt(1);
			// mccarthy.g3:40:9: '>'
			{
			DebugLocation(40, 9);
			Match('>'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__60", 20);
			LeaveRule("T__60", 20);
			LeaveRule_T__60();
		}
	}
	// $ANTLR end "T__60"

	partial void EnterRule_T__61();
	partial void LeaveRule_T__61();

	// $ANTLR start "T__61"
	[GrammarRule("T__61")]
	private void mT__61()
	{
		EnterRule_T__61();
		EnterRule("T__61", 21);
		TraceIn("T__61", 21);
		try
		{
			int _type = T__61;
			int _channel = DefaultTokenChannel;
			// mccarthy.g3:41:7: ( '?' )
			DebugEnterAlt(1);
			// mccarthy.g3:41:9: '?'
			{
			DebugLocation(41, 9);
			Match('?'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__61", 21);
			LeaveRule("T__61", 21);
			LeaveRule_T__61();
		}
	}
	// $ANTLR end "T__61"

	partial void EnterRule_T__62();
	partial void LeaveRule_T__62();

	// $ANTLR start "T__62"
	[GrammarRule("T__62")]
	private void mT__62()
	{
		EnterRule_T__62();
		EnterRule("T__62", 22);
		TraceIn("T__62", 22);
		try
		{
			int _type = T__62;
			int _channel = DefaultTokenChannel;
			// mccarthy.g3:42:7: ( '?>' )
			DebugEnterAlt(1);
			// mccarthy.g3:42:9: '?>'
			{
			DebugLocation(42, 9);
			Match("?>"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__62", 22);
			LeaveRule("T__62", 22);
			LeaveRule_T__62();
		}
	}
	// $ANTLR end "T__62"

	partial void EnterRule_T__63();
	partial void LeaveRule_T__63();

	// $ANTLR start "T__63"
	[GrammarRule("T__63")]
	private void mT__63()
	{
		EnterRule_T__63();
		EnterRule("T__63", 23);
		TraceIn("T__63", 23);
		try
		{
			int _type = T__63;
			int _channel = DefaultTokenChannel;
			// mccarthy.g3:43:7: ( 'import' )
			DebugEnterAlt(1);
			// mccarthy.g3:43:9: 'import'
			{
			DebugLocation(43, 9);
			Match("import"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__63", 23);
			LeaveRule("T__63", 23);
			LeaveRule_T__63();
		}
	}
	// $ANTLR end "T__63"

	partial void EnterRule_T__64();
	partial void LeaveRule_T__64();

	// $ANTLR start "T__64"
	[GrammarRule("T__64")]
	private void mT__64()
	{
		EnterRule_T__64();
		EnterRule("T__64", 24);
		TraceIn("T__64", 24);
		try
		{
			int _type = T__64;
			int _channel = DefaultTokenChannel;
			// mccarthy.g3:44:7: ( 'module' )
			DebugEnterAlt(1);
			// mccarthy.g3:44:9: 'module'
			{
			DebugLocation(44, 9);
			Match("module"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__64", 24);
			LeaveRule("T__64", 24);
			LeaveRule_T__64();
		}
	}
	// $ANTLR end "T__64"

	partial void EnterRule_T__65();
	partial void LeaveRule_T__65();

	// $ANTLR start "T__65"
	[GrammarRule("T__65")]
	private void mT__65()
	{
		EnterRule_T__65();
		EnterRule("T__65", 25);
		TraceIn("T__65", 25);
		try
		{
			int _type = T__65;
			int _channel = DefaultTokenChannel;
			// mccarthy.g3:45:7: ( '{' )
			DebugEnterAlt(1);
			// mccarthy.g3:45:9: '{'
			{
			DebugLocation(45, 9);
			Match('{'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__65", 25);
			LeaveRule("T__65", 25);
			LeaveRule_T__65();
		}
	}
	// $ANTLR end "T__65"

	partial void EnterRule_T__66();
	partial void LeaveRule_T__66();

	// $ANTLR start "T__66"
	[GrammarRule("T__66")]
	private void mT__66()
	{
		EnterRule_T__66();
		EnterRule("T__66", 26);
		TraceIn("T__66", 26);
		try
		{
			int _type = T__66;
			int _channel = DefaultTokenChannel;
			// mccarthy.g3:46:7: ( '}' )
			DebugEnterAlt(1);
			// mccarthy.g3:46:9: '}'
			{
			DebugLocation(46, 9);
			Match('}'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__66", 26);
			LeaveRule("T__66", 26);
			LeaveRule_T__66();
		}
	}
	// $ANTLR end "T__66"

	partial void EnterRule_ID();
	partial void LeaveRule_ID();

	// $ANTLR start "ID"
	[GrammarRule("ID")]
	private void mID()
	{
		EnterRule_ID();
		EnterRule("ID", 27);
		TraceIn("ID", 27);
		try
		{
			int _type = ID;
			int _channel = DefaultTokenChannel;
			// mccarthy.g3:42:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )
			DebugEnterAlt(1);
			// mccarthy.g3:42:7: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
			{
			DebugLocation(42, 7);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();

			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;}

			DebugLocation(42, 31);
			// mccarthy.g3:42:31: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if (((LA1_0>='0' && LA1_0<='9')||(LA1_0>='A' && LA1_0<='Z')||LA1_0=='_'||(LA1_0>='a' && LA1_0<='z')))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// mccarthy.g3:
					{
					DebugLocation(42, 31);
					input.Consume();


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ID", 27);
			LeaveRule("ID", 27);
			LeaveRule_ID();
		}
	}
	// $ANTLR end "ID"

	partial void EnterRule_INT();
	partial void LeaveRule_INT();

	// $ANTLR start "INT"
	[GrammarRule("INT")]
	private void mINT()
	{
		EnterRule_INT();
		EnterRule("INT", 28);
		TraceIn("INT", 28);
		try
		{
			int _type = INT;
			int _channel = DefaultTokenChannel;
			// mccarthy.g3:45:5: ( ( '0' .. '9' )+ )
			DebugEnterAlt(1);
			// mccarthy.g3:45:7: ( '0' .. '9' )+
			{
			DebugLocation(45, 7);
			// mccarthy.g3:45:7: ( '0' .. '9' )+
			int cnt2=0;
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_0 = input.LA(1);

				if (((LA2_0>='0' && LA2_0<='9')))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// mccarthy.g3:
					{
					DebugLocation(45, 7);
					input.Consume();


					}
					break;

				default:
					if (cnt2 >= 1)
						goto loop2;

					EarlyExitException eee2 = new EarlyExitException( 2, input );
					DebugRecognitionException(eee2);
					throw eee2;
				}
				cnt2++;
			}
			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INT", 28);
			LeaveRule("INT", 28);
			LeaveRule_INT();
		}
	}
	// $ANTLR end "INT"

	partial void EnterRule_STRING();
	partial void LeaveRule_STRING();

	// $ANTLR start "STRING"
	[GrammarRule("STRING")]
	private void mSTRING()
	{
		EnterRule_STRING();
		EnterRule("STRING", 29);
		TraceIn("STRING", 29);
		try
		{
			int _type = STRING;
			int _channel = DefaultTokenChannel;
			// mccarthy.g3:48:2: ( '\\'' ( . )* '\\'' | '\\\"' ( . )* '\\\"' )
			int alt5=2;
			try { DebugEnterDecision(5, false);
			int LA5_0 = input.LA(1);

			if ((LA5_0=='\''))
			{
				alt5 = 1;
			}
			else if ((LA5_0=='\"'))
			{
				alt5 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// mccarthy.g3:48:4: '\\'' ( . )* '\\''
				{
				DebugLocation(48, 4);
				Match('\''); 
				DebugLocation(48, 9);
				// mccarthy.g3:48:9: ( . )*
				try { DebugEnterSubRule(3);
				while (true)
				{
					int alt3=2;
					try { DebugEnterDecision(3, false);
					int LA3_0 = input.LA(1);

					if ((LA3_0=='\''))
					{
						alt3 = 2;
					}
					else if (((LA3_0>='\u0000' && LA3_0<='&')||(LA3_0>='(' && LA3_0<='\uFFFF')))
					{
						alt3 = 1;
					}


					} finally { DebugExitDecision(3); }
					switch ( alt3 )
					{
					case 1:
						DebugEnterAlt(1);
						// mccarthy.g3:48:9: .
						{
						DebugLocation(48, 9);
						MatchAny(); 

						}
						break;

					default:
						goto loop3;
					}
				}

				loop3:
					;

				} finally { DebugExitSubRule(3); }

				DebugLocation(48, 12);
				Match('\''); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// mccarthy.g3:49:4: '\\\"' ( . )* '\\\"'
				{
				DebugLocation(49, 4);
				Match('\"'); 
				DebugLocation(49, 9);
				// mccarthy.g3:49:9: ( . )*
				try { DebugEnterSubRule(4);
				while (true)
				{
					int alt4=2;
					try { DebugEnterDecision(4, false);
					int LA4_0 = input.LA(1);

					if ((LA4_0=='\"'))
					{
						alt4 = 2;
					}
					else if (((LA4_0>='\u0000' && LA4_0<='!')||(LA4_0>='#' && LA4_0<='\uFFFF')))
					{
						alt4 = 1;
					}


					} finally { DebugExitDecision(4); }
					switch ( alt4 )
					{
					case 1:
						DebugEnterAlt(1);
						// mccarthy.g3:49:9: .
						{
						DebugLocation(49, 9);
						MatchAny(); 

						}
						break;

					default:
						goto loop4;
					}
				}

				loop4:
					;

				} finally { DebugExitSubRule(4); }

				DebugLocation(49, 12);
				Match('\"'); 

				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRING", 29);
			LeaveRule("STRING", 29);
			LeaveRule_STRING();
		}
	}
	// $ANTLR end "STRING"

	partial void EnterRule_COMMENT();
	partial void LeaveRule_COMMENT();

	// $ANTLR start "COMMENT"
	[GrammarRule("COMMENT")]
	private void mCOMMENT()
	{
		EnterRule_COMMENT();
		EnterRule("COMMENT", 30);
		TraceIn("COMMENT", 30);
		try
		{
			int _type = COMMENT;
			int _channel = DefaultTokenChannel;
			// mccarthy.g3:52:5: ( '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' | '/*' ( options {greedy=false; } : . )* '*/' )
			int alt9=2;
			try { DebugEnterDecision(9, false);
			int LA9_0 = input.LA(1);

			if ((LA9_0=='/'))
			{
				int LA9_1 = input.LA(2);

				if ((LA9_1=='/'))
				{
					alt9 = 1;
				}
				else if ((LA9_1=='*'))
				{
					alt9 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 9, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 9, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// mccarthy.g3:52:9: '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n'
				{
				DebugLocation(52, 9);
				Match("//"); 

				DebugLocation(52, 14);
				// mccarthy.g3:52:14: (~ ( '\\n' | '\\r' ) )*
				try { DebugEnterSubRule(6);
				while (true)
				{
					int alt6=2;
					try { DebugEnterDecision(6, false);
					int LA6_0 = input.LA(1);

					if (((LA6_0>='\u0000' && LA6_0<='\t')||(LA6_0>='\u000B' && LA6_0<='\f')||(LA6_0>='\u000E' && LA6_0<='\uFFFF')))
					{
						alt6 = 1;
					}


					} finally { DebugExitDecision(6); }
					switch ( alt6 )
					{
					case 1:
						DebugEnterAlt(1);
						// mccarthy.g3:
						{
						DebugLocation(52, 14);
						input.Consume();


						}
						break;

					default:
						goto loop6;
					}
				}

				loop6:
					;

				} finally { DebugExitSubRule(6); }

				DebugLocation(52, 28);
				// mccarthy.g3:52:28: ( '\\r' )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0=='\r'))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// mccarthy.g3:52:28: '\\r'
					{
					DebugLocation(52, 28);
					Match('\r'); 

					}
					break;

				}
				} finally { DebugExitSubRule(7); }

				DebugLocation(52, 34);
				Match('\n'); 
				DebugLocation(52, 39);
				_channel=Hidden;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// mccarthy.g3:53:9: '/*' ( options {greedy=false; } : . )* '*/'
				{
				DebugLocation(53, 9);
				Match("/*"); 

				DebugLocation(53, 14);
				// mccarthy.g3:53:14: ( options {greedy=false; } : . )*
				try { DebugEnterSubRule(8);
				while (true)
				{
					int alt8=2;
					try { DebugEnterDecision(8, false);
					int LA8_0 = input.LA(1);

					if ((LA8_0=='*'))
					{
						int LA8_1 = input.LA(2);

						if ((LA8_1=='/'))
						{
							alt8 = 2;
						}
						else if (((LA8_1>='\u0000' && LA8_1<='.')||(LA8_1>='0' && LA8_1<='\uFFFF')))
						{
							alt8 = 1;
						}


					}
					else if (((LA8_0>='\u0000' && LA8_0<=')')||(LA8_0>='+' && LA8_0<='\uFFFF')))
					{
						alt8 = 1;
					}


					} finally { DebugExitDecision(8); }
					switch ( alt8 )
					{
					case 1:
						DebugEnterAlt(1);
						// mccarthy.g3:53:42: .
						{
						DebugLocation(53, 42);
						MatchAny(); 

						}
						break;

					default:
						goto loop8;
					}
				}

				loop8:
					;

				} finally { DebugExitSubRule(8); }

				DebugLocation(53, 47);
				Match("*/"); 

				DebugLocation(53, 52);
				_channel=Hidden;

				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMENT", 30);
			LeaveRule("COMMENT", 30);
			LeaveRule_COMMENT();
		}
	}
	// $ANTLR end "COMMENT"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 31);
		TraceIn("WS", 31);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// mccarthy.g3:56:5: ( ( ' ' | '\\t' | '\\r' | '\\n' ) )
			DebugEnterAlt(1);
			// mccarthy.g3:56:9: ( ' ' | '\\t' | '\\r' | '\\n' )
			{
			DebugLocation(56, 9);
			if ((input.LA(1)>='\t' && input.LA(1)<='\n')||input.LA(1)=='\r'||input.LA(1)==' ')
			{
				input.Consume();

			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;}

			DebugLocation(60, 11);
			_channel=Hidden;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 31);
			LeaveRule("WS", 31);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	partial void EnterRule_GENERIC_ID();
	partial void LeaveRule_GENERIC_ID();

	// $ANTLR start "GENERIC_ID"
	[GrammarRule("GENERIC_ID")]
	private void mGENERIC_ID()
	{
		EnterRule_GENERIC_ID();
		EnterRule("GENERIC_ID", 32);
		TraceIn("GENERIC_ID", 32);
		try
		{
			int _type = GENERIC_ID;
			int _channel = DefaultTokenChannel;
			// mccarthy.g3:68:5: ( ( LETTER | '_' | ':' ) ( NAMECHAR )* )
			DebugEnterAlt(1);
			// mccarthy.g3:69:7: ( LETTER | '_' | ':' ) ( NAMECHAR )*
			{
			DebugLocation(69, 7);
			if (input.LA(1)==':'||(input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();

			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;}

			DebugLocation(69, 29);
			// mccarthy.g3:69:29: ( NAMECHAR )*
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_0 = input.LA(1);

				if (((LA10_0>='-' && LA10_0<='.')||(LA10_0>='0' && LA10_0<=':')||(LA10_0>='A' && LA10_0<='Z')||LA10_0=='_'||(LA10_0>='a' && LA10_0<='z')))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch ( alt10 )
				{
				case 1:
					DebugEnterAlt(1);
					// mccarthy.g3:
					{
					DebugLocation(69, 29);
					input.Consume();


					}
					break;

				default:
					goto loop10;
				}
			}

			loop10:
				;

			} finally { DebugExitSubRule(10); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GENERIC_ID", 32);
			LeaveRule("GENERIC_ID", 32);
			LeaveRule_GENERIC_ID();
		}
	}
	// $ANTLR end "GENERIC_ID"

	partial void EnterRule_MATCHOP();
	partial void LeaveRule_MATCHOP();

	// $ANTLR start "MATCHOP"
	[GrammarRule("MATCHOP")]
	private void mMATCHOP()
	{
		EnterRule_MATCHOP();
		EnterRule("MATCHOP", 33);
		TraceIn("MATCHOP", 33);
		try
		{
			int _type = MATCHOP;
			int _channel = DefaultTokenChannel;
			// mccarthy.g3:71:9: ( '=?' )
			DebugEnterAlt(1);
			// mccarthy.g3:71:11: '=?'
			{
			DebugLocation(71, 11);
			Match("=?"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MATCHOP", 33);
			LeaveRule("MATCHOP", 33);
			LeaveRule_MATCHOP();
		}
	}
	// $ANTLR end "MATCHOP"

	partial void EnterRule_NAMECHAR();
	partial void LeaveRule_NAMECHAR();

	// $ANTLR start "NAMECHAR"
	[GrammarRule("NAMECHAR")]
	private void mNAMECHAR()
	{
		EnterRule_NAMECHAR();
		EnterRule("NAMECHAR", 34);
		TraceIn("NAMECHAR", 34);
		try
		{
			// mccarthy.g3:74:5: ( LETTER | DIGIT | '.' | '-' | '_' | ':' )
			DebugEnterAlt(1);
			// mccarthy.g3:
			{
			DebugLocation(74, 5);
			if ((input.LA(1)>='-' && input.LA(1)<='.')||(input.LA(1)>='0' && input.LA(1)<=':')||(input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();

			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;}


			}

		}
		finally
		{
			TraceOut("NAMECHAR", 34);
			LeaveRule("NAMECHAR", 34);
			LeaveRule_NAMECHAR();
		}
	}
	// $ANTLR end "NAMECHAR"

	partial void EnterRule_DIGIT();
	partial void LeaveRule_DIGIT();

	// $ANTLR start "DIGIT"
	[GrammarRule("DIGIT")]
	private void mDIGIT()
	{
		EnterRule_DIGIT();
		EnterRule("DIGIT", 35);
		TraceIn("DIGIT", 35);
		try
		{
			// mccarthy.g3:78:5: ( '0' .. '9' )
			DebugEnterAlt(1);
			// mccarthy.g3:
			{
			DebugLocation(78, 5);
			if ((input.LA(1)>='0' && input.LA(1)<='9'))
			{
				input.Consume();

			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;}


			}

		}
		finally
		{
			TraceOut("DIGIT", 35);
			LeaveRule("DIGIT", 35);
			LeaveRule_DIGIT();
		}
	}
	// $ANTLR end "DIGIT"

	partial void EnterRule_LETTER();
	partial void LeaveRule_LETTER();

	// $ANTLR start "LETTER"
	[GrammarRule("LETTER")]
	private void mLETTER()
	{
		EnterRule_LETTER();
		EnterRule("LETTER", 36);
		TraceIn("LETTER", 36);
		try
		{
			// mccarthy.g3:82:5: ( 'a' .. 'z' | 'A' .. 'Z' )
			DebugEnterAlt(1);
			// mccarthy.g3:
			{
			DebugLocation(82, 5);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();

			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;}


			}

		}
		finally
		{
			TraceOut("LETTER", 36);
			LeaveRule("LETTER", 36);
			LeaveRule_LETTER();
		}
	}
	// $ANTLR end "LETTER"

	partial void EnterRule_TEXT();
	partial void LeaveRule_TEXT();

	// $ANTLR start "TEXT"
	[GrammarRule("TEXT")]
	private void mTEXT()
	{
		EnterRule_TEXT();
		EnterRule("TEXT", 37);
		TraceIn("TEXT", 37);
		try
		{
			int _type = TEXT;
			int _channel = DefaultTokenChannel;
			// mccarthy.g3:213:6: ()
			DebugEnterAlt(1);
			// mccarthy.g3:213:8: 
			{
			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TEXT", 37);
			LeaveRule("TEXT", 37);
			LeaveRule_TEXT();
		}
	}
	// $ANTLR end "TEXT"

	public override void mTokens()
	{
		// mccarthy.g3:1:8: ( T__41 | T__42 | T__43 | T__44 | T__45 | T__46 | T__47 | T__48 | T__49 | T__50 | T__51 | T__52 | T__53 | T__54 | T__55 | T__56 | T__57 | T__58 | T__59 | T__60 | T__61 | T__62 | T__63 | T__64 | T__65 | T__66 | ID | INT | STRING | COMMENT | WS | GENERIC_ID | MATCHOP | TEXT )
		int alt11=34;
		try { DebugEnterDecision(11, false);
		try
		{
			alt11 = dfa11.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(11); }
		switch (alt11)
		{
		case 1:
			DebugEnterAlt(1);
			// mccarthy.g3:1:10: T__41
			{
			DebugLocation(1, 10);
			mT__41(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// mccarthy.g3:1:16: T__42
			{
			DebugLocation(1, 16);
			mT__42(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// mccarthy.g3:1:22: T__43
			{
			DebugLocation(1, 22);
			mT__43(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// mccarthy.g3:1:28: T__44
			{
			DebugLocation(1, 28);
			mT__44(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// mccarthy.g3:1:34: T__45
			{
			DebugLocation(1, 34);
			mT__45(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// mccarthy.g3:1:40: T__46
			{
			DebugLocation(1, 40);
			mT__46(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// mccarthy.g3:1:46: T__47
			{
			DebugLocation(1, 46);
			mT__47(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// mccarthy.g3:1:52: T__48
			{
			DebugLocation(1, 52);
			mT__48(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// mccarthy.g3:1:58: T__49
			{
			DebugLocation(1, 58);
			mT__49(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// mccarthy.g3:1:64: T__50
			{
			DebugLocation(1, 64);
			mT__50(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// mccarthy.g3:1:70: T__51
			{
			DebugLocation(1, 70);
			mT__51(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// mccarthy.g3:1:76: T__52
			{
			DebugLocation(1, 76);
			mT__52(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// mccarthy.g3:1:82: T__53
			{
			DebugLocation(1, 82);
			mT__53(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// mccarthy.g3:1:88: T__54
			{
			DebugLocation(1, 88);
			mT__54(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// mccarthy.g3:1:94: T__55
			{
			DebugLocation(1, 94);
			mT__55(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// mccarthy.g3:1:100: T__56
			{
			DebugLocation(1, 100);
			mT__56(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// mccarthy.g3:1:106: T__57
			{
			DebugLocation(1, 106);
			mT__57(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// mccarthy.g3:1:112: T__58
			{
			DebugLocation(1, 112);
			mT__58(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// mccarthy.g3:1:118: T__59
			{
			DebugLocation(1, 118);
			mT__59(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// mccarthy.g3:1:124: T__60
			{
			DebugLocation(1, 124);
			mT__60(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// mccarthy.g3:1:130: T__61
			{
			DebugLocation(1, 130);
			mT__61(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// mccarthy.g3:1:136: T__62
			{
			DebugLocation(1, 136);
			mT__62(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// mccarthy.g3:1:142: T__63
			{
			DebugLocation(1, 142);
			mT__63(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// mccarthy.g3:1:148: T__64
			{
			DebugLocation(1, 148);
			mT__64(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// mccarthy.g3:1:154: T__65
			{
			DebugLocation(1, 154);
			mT__65(); 

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// mccarthy.g3:1:160: T__66
			{
			DebugLocation(1, 160);
			mT__66(); 

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// mccarthy.g3:1:166: ID
			{
			DebugLocation(1, 166);
			mID(); 

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// mccarthy.g3:1:169: INT
			{
			DebugLocation(1, 169);
			mINT(); 

			}
			break;
		case 29:
			DebugEnterAlt(29);
			// mccarthy.g3:1:173: STRING
			{
			DebugLocation(1, 173);
			mSTRING(); 

			}
			break;
		case 30:
			DebugEnterAlt(30);
			// mccarthy.g3:1:180: COMMENT
			{
			DebugLocation(1, 180);
			mCOMMENT(); 

			}
			break;
		case 31:
			DebugEnterAlt(31);
			// mccarthy.g3:1:188: WS
			{
			DebugLocation(1, 188);
			mWS(); 

			}
			break;
		case 32:
			DebugEnterAlt(32);
			// mccarthy.g3:1:191: GENERIC_ID
			{
			DebugLocation(1, 191);
			mGENERIC_ID(); 

			}
			break;
		case 33:
			DebugEnterAlt(33);
			// mccarthy.g3:1:202: MATCHOP
			{
			DebugLocation(1, 202);
			mMATCHOP(); 

			}
			break;
		case 34:
			DebugEnterAlt(34);
			// mccarthy.g3:1:210: TEXT
			{
			DebugLocation(1, 210);
			mTEXT(); 

			}
			break;

		}

	}


	#region DFA
	DFA11 dfa11;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa11 = new DFA11(this);
	}

	private class DFA11 : DFA
	{
		private const string DFA11_eotS =
			"\x1\x16\x1\x18\x5\xFFFF\x1\x1B\x1\x1C\x1\xFFFF\x1\x1F\x1\x24\x1\xFFFF"+
			"\x1\x26\x2\x29\x2\xFFFF\x1\x29\xF\xFFFF\x1\x2D\x4\xFFFF\x2\x29\x1\xFFFF"+
			"\x1\x29\x3\xFFFF\x6\x29\x1\x36\x1\x37\x2\xFFFF";
		private const string DFA11_eofS =
			"\x38\xFFFF";
		private const string DFA11_minS =
			"\x1\x9\x1\x3D\x5\xFFFF\x1\x2A\x1\x2D\x1\xFFFF\x1\x3F\x1\x3C\x1\xFFFF"+
			"\x1\x3E\x2\x2D\x2\xFFFF\x1\x2D\xF\xFFFF\x1\x3C\x4\xFFFF\x2\x2D\x1\xFFFF"+
			"\x1\x2D\x3\xFFFF\x8\x2D\x2\xFFFF";
		private const string DFA11_maxS =
			"\x1\x7D\x1\x3D\x5\xFFFF\x1\x3E\x1\x7A\x1\xFFFF\x2\x3F\x1\xFFFF\x1\x3E"+
			"\x2\x7A\x2\xFFFF\x1\x7A\xF\xFFFF\x1\x3E\x4\xFFFF\x2\x7A\x1\xFFFF\x1\x7A"+
			"\x3\xFFFF\x8\x7A\x2\xFFFF";
		private const string DFA11_acceptS =
			"\x2\xFFFF\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x2\xFFFF\x1\xB\x2\xFFFF\x1\x14"+
			"\x3\xFFFF\x1\x19\x1\x1A\x1\xFFFF\x1\x1C\x1\x1D\x1\x1F\x1\x22\x1\x2\x1"+
			"\x1\x1\x9\x1\x1E\x1\x8\x1\xA\x1\x20\x1\xD\x1\xC\x1\xF\x1\x10\x1\xFFFF"+
			"\x1\x21\x1\xE\x1\x16\x1\x15\x2\xFFFF\x1\x1B\x1\xFFFF\x1\x12\x1\x13\x1"+
			"\x11\x8\xFFFF\x1\x17\x1\x18";
		private const string DFA11_specialS =
			"\x38\xFFFF}>";
		private static readonly string[] DFA11_transitionS =
			{
				"\x2\x15\x2\xFFFF\x1\x15\x12\xFFFF\x1\x15\x1\x1\x1\x14\x1\xFFFF\x1\x2"+
				"\x2\xFFFF\x1\x14\x1\x3\x1\x4\x2\xFFFF\x1\x5\x1\x6\x1\xFFFF\x1\x7\xA"+
				"\x13\x1\x8\x1\x9\x1\xA\x1\xB\x1\xC\x1\xD\x1\xFFFF\x1A\x12\x4\xFFFF\x1"+
				"\x12\x1\xFFFF\x8\x12\x1\xE\x3\x12\x1\xF\xD\x12\x1\x10\x1\xFFFF\x1\x11",
				"\x1\x17",
				"",
				"",
				"",
				"",
				"",
				"\x1\x1A\x4\xFFFF\x1\x1A\xE\xFFFF\x1\x19",
				"\x2\x1D\x1\xFFFF\xB\x1D\x6\xFFFF\x1A\x1D\x4\xFFFF\x1\x1D\x1\xFFFF\x1A"+
				"\x1D",
				"",
				"\x1\x1E",
				"\x1\x20\x1\x21\x1\x22\x1\x23",
				"",
				"\x1\x25",
				"\x2\x1D\x1\xFFFF\xA\x28\x1\x1D\x6\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF"+
				"\xC\x28\x1\x27\xD\x28",
				"\x2\x1D\x1\xFFFF\xA\x28\x1\x1D\x6\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF"+
				"\xE\x28\x1\x2A\xB\x28",
				"",
				"",
				"\x2\x1D\x1\xFFFF\xA\x28\x1\x1D\x6\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF"+
				"\x1A\x28",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x2B\x1\xFFFF\x1\x2C",
				"",
				"",
				"",
				"",
				"\x2\x1D\x1\xFFFF\xA\x28\x1\x1D\x6\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF"+
				"\xF\x28\x1\x2E\xA\x28",
				"\x2\x1D\x1\xFFFF\xA\x28\x1\x1D\x6\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF"+
				"\x1A\x28",
				"",
				"\x2\x1D\x1\xFFFF\xA\x28\x1\x1D\x6\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF"+
				"\x3\x28\x1\x2F\x16\x28",
				"",
				"",
				"",
				"\x2\x1D\x1\xFFFF\xA\x28\x1\x1D\x6\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF"+
				"\xE\x28\x1\x30\xB\x28",
				"\x2\x1D\x1\xFFFF\xA\x28\x1\x1D\x6\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF"+
				"\x14\x28\x1\x31\x5\x28",
				"\x2\x1D\x1\xFFFF\xA\x28\x1\x1D\x6\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF"+
				"\x11\x28\x1\x32\x8\x28",
				"\x2\x1D\x1\xFFFF\xA\x28\x1\x1D\x6\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF"+
				"\xB\x28\x1\x33\xE\x28",
				"\x2\x1D\x1\xFFFF\xA\x28\x1\x1D\x6\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF"+
				"\x13\x28\x1\x34\x6\x28",
				"\x2\x1D\x1\xFFFF\xA\x28\x1\x1D\x6\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF"+
				"\x4\x28\x1\x35\x15\x28",
				"\x2\x1D\x1\xFFFF\xA\x28\x1\x1D\x6\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF"+
				"\x1A\x28",
				"\x2\x1D\x1\xFFFF\xA\x28\x1\x1D\x6\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF"+
				"\x1A\x28",
				"",
				""
			};

		private static readonly short[] DFA11_eot = DFA.UnpackEncodedString(DFA11_eotS);
		private static readonly short[] DFA11_eof = DFA.UnpackEncodedString(DFA11_eofS);
		private static readonly char[] DFA11_min = DFA.UnpackEncodedStringToUnsignedChars(DFA11_minS);
		private static readonly char[] DFA11_max = DFA.UnpackEncodedStringToUnsignedChars(DFA11_maxS);
		private static readonly short[] DFA11_accept = DFA.UnpackEncodedString(DFA11_acceptS);
		private static readonly short[] DFA11_special = DFA.UnpackEncodedString(DFA11_specialS);
		private static readonly short[][] DFA11_transition;

		static DFA11()
		{
			int numStates = DFA11_transitionS.Length;
			DFA11_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA11_transition[i] = DFA.UnpackEncodedString(DFA11_transitionS[i]);
			}
		}

		public DFA11( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 11;
			this.eot = DFA11_eot;
			this.eof = DFA11_eof;
			this.min = DFA11_min;
			this.max = DFA11_max;
			this.accept = DFA11_accept;
			this.special = DFA11_special;
			this.transition = DFA11_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( T__41 | T__42 | T__43 | T__44 | T__45 | T__46 | T__47 | T__48 | T__49 | T__50 | T__51 | T__52 | T__53 | T__54 | T__55 | T__56 | T__57 | T__58 | T__59 | T__60 | T__61 | T__62 | T__63 | T__64 | T__65 | T__66 | ID | INT | STRING | COMMENT | WS | GENERIC_ID | MATCHOP | TEXT );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

 
	#endregion

}

} // namespace xmlpl_parser
