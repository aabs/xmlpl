grammar mccarthy;

options {
    language=CSharp3;
    TokenLabelType=CommonToken;
    output=AST;
    ASTLabelType=CommonTree;
}
tokens {
 ROOT; Imports ; FUNCDEC ; FUNCDECLIST ; ARG; ARGLIST ; FUNCBODY; BLOCK;
 BINDING ; VARREF ; REPLACE ; APPEND ; PREPEND ; MATCH ; PATH ; PATHCTX ;
 SEG ; VALINT ; VALSTR ; XML; XMLOPENELEM ; XMLCLOSEELEM ; XMLCHILDREN ; XMLTEXT ; XMLATTR ; XMLATTRS ;
}

@members {
public bool expectingXml = false;
}

@lexer::members {
private int openTags = 0;
private bool readyForAttrs = false;

void inTagStart(){readyForAttrs = true;Console.WriteLine("starting xml tag");}
void inTagBody(){openTags++;readyForAttrs = false;Console.WriteLine("inside xml tag body");} 
void outOfTag(){openTags--;readyForAttrs = false;Console.WriteLine("left xml tag");}
}

@header{
using System;
}
@lexer::header{
using System;
}

@lexer::namespace{xmlpl_parser}
@parser::namespace{xmlpl_parser}

/*
 * Lexer Rules
 */

ID  :	('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'0'..'9'|'_')*
    ;

INT :	'0'..'9'+
    ;
STRING 
	: '\'' .* '\''
	| '\"' .* '\"'
	;
COMMENT
    :   '//' ~('\n'|'\r')* '\r'? '\n' {$channel=Hidden;}
    |   '/*' ( options {greedy=false;} : . )* '*/' {$channel=Hidden;}
    ;

WS  :   ( ' '
        | '\t'
        | '\r'
        | '\n'
        ) {$channel=Hidden;}
    ;
 




GENERIC_ID
    : 
      ( LETTER | '_' | ':') (NAMECHAR)*
    ;
MATCHOP	:	'=?'; 

fragment NAMECHAR
    : LETTER | DIGIT | '.' | '-' | '_' | ':'
    ;
 
fragment DIGIT
    :    '0'..'9'
    ;
 
fragment LETTER
    : 'a'..'z'
    | 'A'..'Z'
    ;
 

/*
 * Parser Rules
 */

public module
    :   md=moduleDeclaration 
    	id=importDeclarations
    	fd=functionDeclarations
    	EOF -> ^(ROOT $md 
					^(Imports $id)? 
					^(FUNCDECLIST $fd)?
				)
    ;
importDeclarations
	: (importDeclaration)*
	;

importDeclaration
	: 'import' ID ';' -> ^('import' ID) ;

moduleDeclaration
	: 'module' ID ';' -> ^('module' ID)
	;

functionDeclarations
	: (functionDeclaration)*
	;

functionDeclaration
	: functionName=ID '(' al=argList ')' '{' sl=statements '}'
		-> ^(FUNCDEC $functionName ^(ARGLIST $al)? ^(FUNCBODY $sl)?)
	;

argList
	: arg (',' arg)*
		-> arg+
	;

arg
	: argName=ID ':' type=ID
		-> ^(ARG $argName $type)
	;	
statements 
	:
	(statement ';')* -> ^(BLOCK statement*) 
	;

public statement
	: assignment
	| replaceOperation
	| appendOperation
	| prependOperation
	| matchOperation
	| moveOperation
	| moveFrontOperation
	| moveBackOperation
	| deleteOperation
	;
value
	:
	  x=INT -> ^(VALINT $x)
	| x=ID	-> ^(VARREF $x)
	| x=STRING -> ^(VALSTR $x)
	;

assignment
	:
	id=ID '=' value
	;	
replaceOperation
	:
	pe=pathExpression '==' val=value
		-> ^(REPLACE $pe $val)
	;
pathExpression
	:
	'$' ctx=ID segs=xpathSegments
		-> ^(PATH ^(PATHCTX $ctx) $segs)
	;
xpathSegments
	: ('/' ID)* -> ^(SEG ID)*
	;
appendOperation
	:
	pe=pathExpression '=>' val=value
		-> ^(APPEND $pe $val)
	;
prependOperation
	:
	pe=pathExpression '=<' val=value
		-> ^(PREPEND $pe $val)
	;
public matchOperation
	@init{expectingXml = true;}
	@after{expectingXml = false;}
	:
        ID MATCHOP content -> ^(MATCH ^(VARREF ID) content)
	|pathExpression MATCHOP content -> ^(MATCH pathExpression content)
	;
moveOperation
	:
	var=ID '->'^ val=ID
	;

moveFrontOperation
	:
	var=ID '=><'^ val=ID
	;
moveBackOperation
	:
	var=ID '=>>'^ val=ID
	;
deleteOperation
	:
	var=ID '!='^ val=ID
	;

pattern :	'?' ID
    ;

valueOf 
	: '!' ID
    ;

//------------------------------------[new xml stuff]-----------------------------------

TEXT	:	;
public content     :  (element)* -> ^(XML element*);
public element     :   '<' ID attribute* '>' -> ^(XMLOPENELEM ID ^(XMLATTRS attribute*))
            |   '<?' ID attribute* '?>' // deal with stuff like xml-stylesheet 
            |   '<' '/' ID '>' ->^(XMLCLOSEELEM ID)
            |   '<' ID attribute* '/>'
            ;
public attribute   :  ID '=' STRING -> ^(XMLATTR ID ^(VALSTR STRING));
reference 
	:	;
//CDATA:;
//-----------------------------------------------------------------------
//------------------------------------[old xml stuff]-----------------------------------
/*
xml
	@init{Console.WriteLine("xml");}
 : OTag (xmlContent)* CTag -> ^(XMLELEM OTag xmlContent*)
 | Tag
 ;
 xmlContent
	:
	PCData | xml
	;
PCData
 : {openTags > 0}?=> ~'<'+
 ;
Attrs: {readyForAttrs}?=> Attr*;
Attr: ID '=' STRING;
OTag
 : '<' ID {inTagStart();} Attrs ('>' {inTagBody();}  | '/>' {outOfTag();$type=Tag;})
 ;
CTag
 : '</' ID '>' {outOfTag();}
 ;
fragment Tag : ;
*/
//-----------------------------------------------------------------------




